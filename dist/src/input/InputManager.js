export class InputManager{constructor(){this.keys=new Map,this.previousKeys=new Map,this.keyBindings=new Map,this.listeners=new Map,this.isEnabled=!0,this.initializeEventListeners(),this.setupDefaultBindings()}initializeEventListeners(){document.addEventListener("keydown",e=>{if(!this.isEnabled)return;const s=e.code,t=this.keys.get(s)?.isPressed||!1;this.keys.set(s,{isPressed:!0,justPressed:!t,justReleased:!1,timestamp:Date.now()}),this.triggerKeyEvents("keydown",s,e),this.shouldPreventDefault(s)&&e.preventDefault()}),document.addEventListener("keyup",e=>{if(!this.isEnabled)return;const s=e.code,t=this.keys.get(s)?.isPressed||!1;this.keys.set(s,{isPressed:!1,justPressed:!1,justReleased:t,timestamp:Date.now()}),this.triggerKeyEvents("keyup",s,e),this.shouldPreventDefault(s)&&e.preventDefault()}),document.addEventListener("blur",()=>{this.clearAllKeys()})}setupDefaultBindings(){this.keyBindings.set("move_up",["KeyW","ArrowUp"]),this.keyBindings.set("move_down",["KeyS","ArrowDown"]),this.keyBindings.set("move_left",["KeyA","ArrowLeft"]),this.keyBindings.set("move_right",["KeyD","ArrowRight"]),this.keyBindings.set("action",["Space"]),this.keyBindings.set("menu",["Escape"]),this.keyBindings.set("boost",["ShiftLeft","ShiftRight"])}isPressed(e){if(this.keyBindings.has(e)){return this.keyBindings.get(e).some(e=>this.keys.get(e)?.isPressed||!1)}return this.keys.get(e)?.isPressed||!1}justPressed(e){if(this.keyBindings.has(e)){return this.keyBindings.get(e).some(e=>this.keys.get(e)?.justPressed||!1)}return this.keys.get(e)?.justPressed||!1}justReleased(e){if(this.keyBindings.has(e)){return this.keyBindings.get(e).some(e=>this.keys.get(e)?.justReleased||!1)}return this.keys.get(e)?.justReleased||!1}getMovementVector(){const e={x:0,y:0};this.isPressed("move_up")&&(e.y-=1),this.isPressed("move_down")&&(e.y+=1),this.isPressed("move_left")&&(e.x-=1),this.isPressed("move_right")&&(e.x+=1);const s=Math.sqrt(e.x**2+e.y**2);return s>0&&(e.x/=s,e.y/=s),e}bindKey(e,s){Array.isArray(s)||(s=[s]),this.keyBindings.set(e,s)}unbindKey(e){this.keyBindings.delete(e)}addEventListener(e,s,t){const i=`${e}_${s}`;this.listeners.has(i)||this.listeners.set(i,[]),this.listeners.get(i).push(t)}removeEventListener(e,s,t){const i=`${e}_${s}`,n=this.listeners.get(i);if(n){const e=n.indexOf(t);e>-1&&n.splice(e,1)}}triggerKeyEvents(e,s,t){const i=`${e}_${s}`,n=this.listeners.get(i);n&&n.forEach(e=>{e(s,t)});for(const[i,n]of this.keyBindings)if(n.includes(s)){const s=`${e}_${i}`,n=this.listeners.get(s);n&&n.forEach(e=>{e(i,t)})}}shouldPreventDefault(e){return["ArrowUp","ArrowDown","ArrowLeft","ArrowRight","KeyW","KeyA","KeyS","KeyD","Space"].includes(e)}update(){this.previousKeys.clear();for(const[e,s]of this.keys)this.previousKeys.set(e,{isPressed:s.isPressed,justPressed:s.justPressed,justReleased:s.justReleased,timestamp:s.timestamp});for(const[e,s]of this.keys)s.justPressed&&(s.justPressed=!1),s.justReleased&&(s.justReleased=!1)}clearAllKeys(){for(const[e,s]of this.keys)s.isPressed=!1,s.justPressed=!1,s.justReleased=!0}enable(){this.isEnabled=!0}disable(){this.isEnabled=!1,this.clearAllKeys()}getKeyState(e){if(this.keyBindings.has(e)){const s=this.keyBindings.get(e);for(const e of s){const s=this.keys.get(e);if(s?.isPressed)return s}return{isPressed:!1,justPressed:!1,justReleased:!1,timestamp:0}}return this.keys.get(e)||{isPressed:!1,justPressed:!1,justReleased:!1,timestamp:0}}getPressedKeys(){const e=[];for(const[s,t]of this.keys)t.isPressed&&e.push(s);return e}getActiveActions(){const e=[];for(const[s,t]of this.keyBindings)t.some(e=>this.keys.get(e)?.isPressed)&&e.push(s);return e}getPreviousKeyState(e){if(this.keyBindings.has(e)){const s=this.keyBindings.get(e);for(const e of s){const s=this.previousKeys.get(e);if(s?.isPressed)return s}return{isPressed:!1,justPressed:!1,justReleased:!1,timestamp:0}}return this.previousKeys.get(e)||{isPressed:!1,justPressed:!1,justReleased:!1,timestamp:0}}}
import{IDGenerator as t}from"../utils/IDGenerator.js";import{WORLD_GEN as e,GRAPHICS as a}from"../constants.js";export class StarSystem{constructor(t,e={x:0,y:0}){this.id=t,this.name=this.generateSystemName(),this.coordinates=e,this.star=this.generateStar(),this.planets=[],this.asteroidBelts=[],this.spaceStations=[],this.jumpGates=[],this.wormholes=[],this.generated=!1,this.generateSystem()}generateSystemName(){const t=["Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta"],e=["Centauri","Orionis","Draconis","Cygni","Lyrae","Vega","Rigel","Altair"],a=["I","II","III","IV","V","VI","VII","VIII"];return`${t[Math.floor(Math.random()*t.length)]} ${e[Math.floor(Math.random()*e.length)]} ${a[Math.floor(Math.random()*a.length)]}`}generateStar(){const a=[{spectralClass:"O",type:"Blue Supergiant",color:"#a8d8ff",size:15,temperature:35e3,mass:20,frequency:3e-5},{spectralClass:"B",type:"Blue Giant",color:"#b8e0ff",size:7,temperature:18e3,mass:8,frequency:.13},{spectralClass:"A",type:"White Main Sequence",color:"#ffffff",size:1.8,temperature:8500,mass:2,frequency:.6},{spectralClass:"F",type:"Yellow-White Main Sequence",color:"#fff2cc",size:1.3,temperature:6500,mass:1.4,frequency:3},{spectralClass:"G",type:"Yellow Dwarf",color:"#ffff99",size:1,temperature:5800,mass:1,frequency:7.6},{spectralClass:"K",type:"Orange Dwarf",color:"#ffcc66",size:.8,temperature:4200,mass:.7,frequency:12.1},{spectralClass:"M",type:"Red Dwarf",color:"#ff9999",size:.4,temperature:3e3,mass:.3,frequency:76.45}],r=a.reduce((t,e)=>t+e.frequency,0);let s=Math.random()*r,o=a[a.length-1];for(const t of a)if(s-=t.frequency,s<=0){o=t;break}const n=e.STELLAR_SIZE_VARIANCE_MIN+Math.random()*e.STELLAR_SIZE_VARIANCE_MAX,i=e.STELLAR_TEMP_VARIANCE_MIN+Math.random()*e.STELLAR_TEMP_VARIANCE_MAX,_=e.STELLAR_MASS_VARIANCE_MIN+Math.random()*e.STELLAR_MASS_VARIANCE_MAX;return{id:t.generate(),spectralClass:o.spectralClass,type:o.type,color:o.color,size:o.size*n,temperature:o.temperature*i,mass:o.mass*_,x:0,y:0,luminosity:Math.pow(o.size*n,2)*Math.pow(o.temperature*i/e.STAR_TEMPERATURE_REFERENCE,e.STELLAR_LUMINOSITY_TEMP_EXPONENT),lifespan:this.calculateStellarLifespan(o.mass*_),habitableZoneInner:this.calculateHabitableZone(o.size*n,o.temperature*i,!0),habitableZoneOuter:this.calculateHabitableZone(o.size*n,o.temperature*i,!1)}}calculateStellarLifespan(t){return e.STELLAR_LIFETIME_REFERENCE_YEARS*Math.pow(t,e.STELLAR_LIFETIME_MASS_EXPONENT)}calculateHabitableZone(t,a,r){const s=Math.pow(t,2)*Math.pow(a/e.STAR_TEMPERATURE_REFERENCE,e.STELLAR_LUMINOSITY_TEMP_EXPONENT);return r?Math.sqrt(s/e.HABITABLE_ZONE_INNER_THRESHOLD):Math.sqrt(s/e.HABITABLE_ZONE_OUTER_THRESHOLD)}generateSystem(){if(this.generated)return;const t=Math.floor(Math.random()*e.MAX_PLANETS)+e.MIN_PLANETS;let a=e.STARTING_ORBIT_DISTANCE;for(let r=0;r<t;r++){const t=this.generatePlanet(r,a);this.planets.push(t),a+=Math.random()*e.MAX_ORBIT_SPACING+e.MIN_ORBIT_SPACING}const r=Math.floor(Math.random()*(e.MAX_ASTEROID_BELTS+1));for(let t=0;t<r;t++){const t=this.generateAsteroidBelt();this.asteroidBelts.push(t)}const s=Math.floor(Math.random()*e.MAX_SPACE_STATIONS)+e.MIN_SPACE_STATIONS;for(let t=0;t<s;t++){const t=this.generateSpaceStation();this.spaceStations.push(t)}const o=Math.floor(Math.random()*e.MAX_JUMP_GATES)+e.MIN_JUMP_GATES;for(let t=0;t<o;t++){const t=this.generateJumpGate();this.jumpGates.push(t)}const n=Math.floor(Math.random()*(e.MAX_WORMHOLES+1));for(let t=0;t<n;t++)if(Math.random()<e.WORMHOLE_SPAWN_PROBABILITY){const t=this.generateWormhole();this.wormholes.push(t)}this.generated=!0}generatePlanet(a,r){const s=[{type:"Rocky",color:"#8d6e63",size:.8,atmosphere:!1},{type:"Desert",color:"#ffb74d",size:1,atmosphere:!0},{type:"Ocean",color:"#42a5f5",size:1.2,atmosphere:!0},{type:"Forest",color:"#66bb6a",size:1.1,atmosphere:!0},{type:"Ice",color:"#e1f5fe",size:.9,atmosphere:!1},{type:"Gas Giant",color:"#ab47bc",size:2.5,atmosphere:!0},{type:"Volcanic",color:"#f44336",size:1,atmosphere:!0}],o=s[Math.floor(Math.random()*s.length)],n=2*Math.random()*Math.PI;return{id:t.generate(),name:`${this.name.split(" ")[0]} ${a+1}`,type:o.type,color:o.color,size:o.size,atmosphere:o.atmosphere,orbitDistance:r,orbitAngle:n,x:Math.cos(n)*r,y:Math.sin(n)*r,orbitSpeed:e.PLANET_BASE_ORBIT_SPEED/Math.sqrt(r),resources:this.generatePlanetResources(o),moons:this.generateMoons(a,o.size)}}generatePlanetResources(t){const a=["iron","water","minerals"];return({Rocky:["titanium","rare_metals"],Desert:["silicon","crystals"],Ocean:["hydrogen","organic_compounds"],Forest:["biomass","pharmaceuticals"],Ice:["water","frozen_gases"],"Gas Giant":["helium","hydrogen","exotic_gases"],Volcanic:["sulfur","rare_minerals","thermal_energy"]}[t.type]||[]).forEach(t=>{Math.random()<e.RESOURCE_SPAWN_PROBABILITY&&a.push(t)}),a.map(t=>({type:t,abundance:Math.random()*(e.MAX_RESOURCE_ABUNDANCE-e.MIN_RESOURCE_ABUNDANCE)+e.MIN_RESOURCE_ABUNDANCE}))}generateMoons(a,r){const s=Math.floor(Math.random()*(e.MAX_MOONS_PER_PLANET+1)),o=[];for(let n=0;n<s;n++){const s=r*e.MOON_BASE_DISTANCE_MULTIPLIER+n*e.MOON_ORBIT_SPACING+Math.random()*e.MOON_ORBIT_RANDOMNESS,i=2*Math.random()*Math.PI,_=Math.random()*e.MOON_MAX_SIZE_RATIO+e.MOON_MIN_SIZE_RATIO,E=[{type:"Rocky Moon",color:"#9e9e9e",resources:["iron","titanium"]},{type:"Ice Moon",color:"#e3f2fd",resources:["water","frozen_gases"]},{type:"Volcanic Moon",color:"#ff7043",resources:["sulfur","rare_minerals"]},{type:"Dead Moon",color:"#757575",resources:["dust","minerals"]}],h=E[Math.floor(Math.random()*E.length)];o.push({id:t.generate(),name:`${this.name.split(" ")[0]} ${a+1}-${n+1}`,type:h.type,color:h.color,size:_,orbitDistance:s,orbitAngle:i,x:Math.cos(i)*s,y:Math.sin(i)*s,orbitSpeed:2*e.PLANET_BASE_ORBIT_SPEED/Math.sqrt(s),resources:this.generateMoonResources(h),tidallyLocked:Math.random()<e.MOON_TIDAL_LOCK_PROBABILITY})}return o}generateMoonResources(t){const a=[];return t.resources.forEach(t=>{Math.random()<e.RESOURCE_SPAWN_PROBABILITY*e.MOON_RESOURCE_SPAWN_MULTIPLIER&&a.push({type:t,abundance:Math.random()*(e.MAX_RESOURCE_ABUNDANCE*e.MOON_RESOURCE_ABUNDANCE_MULTIPLIER-e.MIN_RESOURCE_ABUNDANCE*e.MOON_RESOURCE_ABUNDANCE_MIN_MULTIPLIER)+e.MIN_RESOURCE_ABUNDANCE*e.MOON_RESOURCE_ABUNDANCE_MIN_MULTIPLIER})}),a}generateAsteroidBelt(){const a=Math.random()*(e.MAX_ASTEROID_BELT_DISTANCE-e.MIN_ASTEROID_BELT_DISTANCE)+e.MIN_ASTEROID_BELT_DISTANCE,r=Math.floor(Math.random()*(e.MAX_ASTEROIDS_PER_BELT-e.MIN_ASTEROIDS_PER_BELT))+e.MIN_ASTEROIDS_PER_BELT,s=[];for(let o=0;o<r;o++){const r=2*Math.random()*Math.PI,o=a+(Math.random()-e.BELT_CENTER_OFFSET)*e.BELT_SPREAD;s.push({id:t.generate(),x:Math.cos(r)*o,y:Math.sin(r)*o,size:Math.random()*(e.MAX_ASTEROID_SIZE-e.MIN_ASTEROID_SIZE)+e.MIN_ASTEROID_SIZE,rotation:Math.random()*e.FULL_CIRCLE_DEGREES,rotationSpeed:2*(Math.random()-e.ROTATION_SPEED_VARIANCE),resources:this.generateAsteroidResources(),orbitSpeed:e.ASTEROID_BASE_ORBIT_SPEED/Math.sqrt(o)})}return{id:t.generate(),centerDistance:a,asteroids:s,density:r/e.BELT_SPREAD}}generateAsteroidResources(){const t=[];return["iron","nickel","rare_metals","crystals","ice"].forEach(a=>{Math.random()<e.ASTEROID_RESOURCE_PROBABILITY&&t.push({type:a,abundance:Math.random()*(e.MAX_ASTEROID_ABUNDANCE-e.MIN_ASTEROID_ABUNDANCE)+e.MIN_ASTEROID_ABUNDANCE})}),t}generateSpaceStation(){const a=[{type:"Trading Post",services:["trading","refuel","repair"]},{type:"Mining Station",services:["trading","mining_equipment","ore_processing"]},{type:"Research Station",services:["technology","ship_upgrades","data"]},{type:"Military Outpost",services:["weapons","armor","security"]},{type:"Refinery",services:["fuel","materials_processing","trading"]}],r=a[Math.floor(Math.random()*a.length)],s=Math.random()*(e.MAX_STATION_DISTANCE-e.MIN_STATION_DISTANCE)+e.MIN_STATION_DISTANCE,o=2*Math.random()*Math.PI;return{id:t.generate(),name:`${r.type} ${Math.floor(Math.random()*e.STATION_NAME_MAX_NUMBER)+1}`,type:r.type,services:r.services,x:Math.cos(o)*s,y:Math.sin(o)*s,faction:this.generateFaction(),inventory:this.generateStationInventory(r),dockingBays:Math.floor(Math.random()*(e.MAX_DOCKING_BAYS-e.MIN_DOCKING_BAYS))+e.MIN_DOCKING_BAYS,population:Math.floor(Math.random()*(e.MAX_STATION_POPULATION-e.MIN_STATION_POPULATION))+e.MIN_STATION_POPULATION}}generateFaction(){const t=["Independent Traders","Mining Consortium","Research Coalition","Security Forces","Colonial Union","Free Merchants"];return t[Math.floor(Math.random()*t.length)]}generateStationInventory(t){const a={"Trading Post":["food","water","fuel","basic_materials","consumer_goods"],"Mining Station":["mining_equipment","industrial_tools","raw_materials","fuel"],"Research Station":["technology","data_cores","research_equipment","rare_materials"],"Military Outpost":["weapons","armor","ammunition","military_supplies"],Refinery:["fuel","refined_materials","chemicals","processed_goods"]},r=a[t.type]||a["Trading Post"],s={};return r.forEach(t=>{s[t]={stock:Math.floor(Math.random()*(e.MAX_STATION_STOCK-e.MIN_STATION_STOCK))+e.MIN_STATION_STOCK,buyPrice:Math.floor(Math.random()*(e.MAX_BUY_PRICE-e.MIN_BUY_PRICE))+e.MIN_BUY_PRICE,sellPrice:Math.floor(Math.random()*(e.MAX_SELL_PRICE-e.MIN_SELL_PRICE))+e.MIN_SELL_PRICE}}),s}generateJumpGate(){const a=Math.random()*(e.MAX_JUMP_GATE_DISTANCE-e.MIN_JUMP_GATE_DISTANCE)+e.MIN_JUMP_GATE_DISTANCE,r=2*Math.random()*Math.PI;return{id:t.generate(),name:`Gate ${Math.floor(Math.random()*e.GATE_NAME_MAX_NUMBER)+1}`,x:Math.cos(r)*a,y:Math.sin(r)*a,destinationSystem:null,isActive:Math.random()<e.GATE_ACTIVE_PROBABILITY,energyCost:Math.floor(Math.random()*(e.MAX_ENERGY_COST-e.MIN_ENERGY_COST))+e.MIN_ENERGY_COST,size:Math.random()*(e.MAX_JUMP_GATE_SIZE-e.MIN_JUMP_GATE_SIZE)+e.MIN_JUMP_GATE_SIZE}}generateWormhole(){const a=Math.random()*(e.MAX_WORMHOLE_DISTANCE-e.MIN_WORMHOLE_DISTANCE)+e.MIN_WORMHOLE_DISTANCE,r=2*Math.random()*Math.PI,s=Math.random()*(e.MAX_WORMHOLE_SIZE-e.MIN_WORMHOLE_SIZE)+e.MIN_WORMHOLE_SIZE,o=Math.random()*(e.WORMHOLE_INSTABILITY_MAX-e.WORMHOLE_INSTABILITY_MIN)+e.WORMHOLE_INSTABILITY_MIN,n=[{type:"Stable",color:"#8A2BE2",danger:.1},{type:"Unstable",color:"#FF4500",danger:.5},{type:"Collapsed",color:"#8B0000",danger:.9}],i=n[Math.floor(Math.random()*n.length)];return{id:t.generate(),name:`Wormhole ${String.fromCharCode(e.WORMHOLE_NAME_LETTER_BASE+Math.floor(Math.random()*e.WORMHOLE_NAME_LETTER_COUNT))}${Math.floor(Math.random()*e.WORMHOLE_NAME_NUMBER_MAX)+1}`,type:i.type,x:Math.cos(r)*a,y:Math.sin(r)*a,size:s,instability:o,color:i.color,dangerLevel:i.danger,destinationSystem:null,isActive:o<e.WORMHOLE_INACTIVE_INSTABILITY_THRESHOLD,energyFluctuation:Math.random()*e.WORMHOLE_ENERGY_FLUCTUATION_RANGE+e.WORMHOLE_ENERGY_FLUCTUATION_BASE,temporalDistortion:Math.random()*e.WORMHOLE_TEMPORAL_DISTORTION_MAX}}updateOrbits(t){this.planets.forEach(e=>{e.orbitAngle+=e.orbitSpeed*t,e.x=Math.cos(e.orbitAngle)*e.orbitDistance,e.y=Math.sin(e.orbitAngle)*e.orbitDistance,e.moons.forEach(a=>{a.orbitAngle+=a.orbitSpeed*t;const r=Math.cos(a.orbitAngle)*a.orbitDistance,s=Math.sin(a.orbitAngle)*a.orbitDistance;a.x=e.x+r,a.y=e.y+s})}),this.asteroidBelts.forEach(e=>{e.asteroids.forEach(e=>{void 0===e.cachedDistance&&(e.cachedDistance=Math.sqrt(e.x*e.x+e.y*e.y),e.currentAngle=Math.atan2(e.y,e.x)),e.currentAngle+=e.orbitSpeed*t,e.x=Math.cos(e.currentAngle)*e.cachedDistance,e.y=Math.sin(e.currentAngle)*e.cachedDistance,e.rotation+=e.rotationSpeed*t})})}getSystemInfo(){const t=this.planets.reduce((t,e)=>t+e.moons.length,0);return{id:this.id,name:this.name,coordinates:this.coordinates,star:this.star,planetCount:this.planets.length,moonCount:t,asteroidBeltCount:this.asteroidBelts.length,spaceStationCount:this.spaceStations.length,jumpGateCount:this.jumpGates.length,wormholeCount:this.wormholes.length}}getAllBodies(){const t=[];return this.planets.forEach(e=>{t.push(...e.moons)}),{star:this.star,planets:this.planets,moons:t,asteroidBelts:this.asteroidBelts,spaceStations:this.spaceStations,jumpGates:this.jumpGates,wormholes:this.wormholes}}renderSystem(t){const e=t.createElement("g");e.setAttribute("id",`star-system-${this.id}`);const r=t.createStar(this.star.x,this.star.y,this.star.size,this.star.color,this.star.spectralClass);return r.setAttribute("class","star"),r.setAttribute("data-spectral-class",this.star.spectralClass),r.setAttribute("data-star-type",this.star.type),e.appendChild(r),this.planets.forEach(a=>{const r=t.createElement("circle");r.setAttribute("cx",a.x),r.setAttribute("cy",a.y),r.setAttribute("r",a.size),r.setAttribute("fill",a.color),r.setAttribute("class","planet"),e.appendChild(r),a.moons.forEach(r=>{const s=t.createElement("circle");s.setAttribute("cx",r.x),s.setAttribute("cy",r.y),s.setAttribute("r",r.size*a.size),s.setAttribute("fill",r.color),s.setAttribute("class","moon"),e.appendChild(s)})}),this.asteroidBelts.forEach(a=>{a.asteroids.forEach(a=>{const r=t.createElement("circle");r.setAttribute("cx",a.x),r.setAttribute("cy",a.y),r.setAttribute("r",a.size),r.setAttribute("fill","#8d6e63"),r.setAttribute("class","asteroid"),e.appendChild(r)})}),this.spaceStations.forEach(r=>{const s=t.createElement("rect");s.setAttribute("x",r.x-a.STATION_RENDER_SIZE),s.setAttribute("y",r.y-a.STATION_RENDER_SIZE),s.setAttribute("width",a.STATION_RENDER_WIDTH),s.setAttribute("height",a.STATION_RENDER_HEIGHT),s.setAttribute("fill","#2196f3"),s.setAttribute("class","space-station"),e.appendChild(s)}),this.jumpGates.forEach(r=>{const s=t.createElement("circle");s.setAttribute("cx",r.x),s.setAttribute("cy",r.y),s.setAttribute("r",a.JUMP_GATE_RENDER_RADIUS),s.setAttribute("fill","none"),s.setAttribute("stroke","#9c27b0"),s.setAttribute("stroke-width","3"),s.setAttribute("class","jump-gate"),e.appendChild(s)}),this.wormholes.forEach(a=>{const r=t.createWormhole(a.x,a.y,a.size,{id:a.id,class:"wormhole"});e.appendChild(r)}),e}findNearestStation(t,a,r=e.DEFAULT_INTERACTION_RANGE){let s=null,o=r;return this.spaceStations.forEach(e=>{const r=Math.sqrt((e.x-t)**2+(e.y-a)**2);r<o&&(s=e,o=r)}),s}findNearestJumpGate(t,a,r=e.DEFAULT_INTERACTION_RANGE){let s=null,o=r;return this.jumpGates.forEach(e=>{const r=Math.sqrt((e.x-t)**2+(e.y-a)**2);r<o&&e.isActive&&(s=e,o=r)}),s}findNearestWormhole(t,a,r=e.DEFAULT_INTERACTION_RANGE){let s=null,o=r;return this.wormholes.forEach(e=>{const r=Math.sqrt((e.x-t)**2+(e.y-a)**2);r<o&&e.isActive&&(s=e,o=r)}),s}}
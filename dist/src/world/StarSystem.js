import{IDGenerator as t}from"../utils/IDGenerator.js";import{WORLD_GEN as e,GRAPHICS as r}from"../constants.js";export class StarSystem{constructor(t,e={x:0,y:0}){this.id=t,this.name=this.generateSystemName(),this.coordinates=e,this.star=this.generateStar(),this.planets=[],this.asteroidBelts=[],this.spaceStations=[],this.jumpGates=[],this.generated=!1,this.generateSystem()}generateSystemName(){const t=["Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta"],e=["Centauri","Orionis","Draconis","Cygni","Lyrae","Vega","Rigel","Altair"],r=["I","II","III","IV","V","VI","VII","VIII"];return`${t[Math.floor(Math.random()*t.length)]} ${e[Math.floor(Math.random()*e.length)]} ${r[Math.floor(Math.random()*r.length)]}`}generateStar(){const r=[{type:"Red Dwarf",color:"#ff6b6b",size:.6,temperature:3e3},{type:"Yellow Dwarf",color:"#ffd93d",size:1,temperature:5800},{type:"White Dwarf",color:"#ffffff",size:.8,temperature:8e3},{type:"Blue Giant",color:"#74c0fc",size:1.5,temperature:12e3},{type:"Red Giant",color:"#ff8787",size:2,temperature:4e3}],a=r[Math.floor(Math.random()*r.length)];return{id:t.generate(),type:a.type,color:a.color,size:a.size,temperature:a.temperature,x:0,y:0,luminosity:a.size*a.temperature/e.STAR_TEMPERATURE_REFERENCE}}generateSystem(){if(this.generated)return;const t=Math.floor(Math.random()*e.MAX_PLANETS)+e.MIN_PLANETS;let r=e.STARTING_ORBIT_DISTANCE;for(let a=0;a<t;a++){const t=this.generatePlanet(a,r);this.planets.push(t),r+=Math.random()*e.MAX_ORBIT_SPACING+e.MIN_ORBIT_SPACING}const a=Math.floor(Math.random()*(e.MAX_ASTEROID_BELTS+1));for(let t=0;t<a;t++){const t=this.generateAsteroidBelt();this.asteroidBelts.push(t)}const s=Math.floor(Math.random()*e.MAX_SPACE_STATIONS)+e.MIN_SPACE_STATIONS;for(let t=0;t<s;t++){const t=this.generateSpaceStation();this.spaceStations.push(t)}const o=Math.floor(Math.random()*e.MAX_JUMP_GATES)+e.MIN_JUMP_GATES;for(let t=0;t<o;t++){const t=this.generateJumpGate();this.jumpGates.push(t)}this.generated=!0}generatePlanet(r,a){const s=[{type:"Rocky",color:"#8d6e63",size:.8,atmosphere:!1},{type:"Desert",color:"#ffb74d",size:1,atmosphere:!0},{type:"Ocean",color:"#42a5f5",size:1.2,atmosphere:!0},{type:"Forest",color:"#66bb6a",size:1.1,atmosphere:!0},{type:"Ice",color:"#e1f5fe",size:.9,atmosphere:!1},{type:"Gas Giant",color:"#ab47bc",size:2.5,atmosphere:!0},{type:"Volcanic",color:"#f44336",size:1,atmosphere:!0}],o=s[Math.floor(Math.random()*s.length)],n=2*Math.random()*Math.PI;return{id:t.generate(),name:`${this.name.split(" ")[0]} ${r+1}`,type:o.type,color:o.color,size:o.size,atmosphere:o.atmosphere,orbitDistance:a,orbitAngle:n,x:Math.cos(n)*a,y:Math.sin(n)*a,orbitSpeed:e.PLANET_BASE_ORBIT_SPEED/Math.sqrt(a),resources:this.generatePlanetResources(o),moons:this.generateMoons(r,o.size)}}generatePlanetResources(t){const r=["iron","water","minerals"];return({Rocky:["titanium","rare_metals"],Desert:["silicon","crystals"],Ocean:["hydrogen","organic_compounds"],Forest:["biomass","pharmaceuticals"],Ice:["water","frozen_gases"],"Gas Giant":["helium","hydrogen","exotic_gases"],Volcanic:["sulfur","rare_minerals","thermal_energy"]}[t.type]||[]).forEach(t=>{Math.random()<e.RESOURCE_SPAWN_PROBABILITY&&r.push(t)}),r.map(t=>({type:t,abundance:Math.random()*(e.MAX_RESOURCE_ABUNDANCE-e.MIN_RESOURCE_ABUNDANCE)+e.MIN_RESOURCE_ABUNDANCE}))}generateMoons(r,a){const s=Math.floor(Math.random()*(e.MAX_MOONS_PER_PLANET+1)),o=[];for(let n=0;n<s;n++){const s=a*e.MOON_BASE_DISTANCE_MULTIPLIER+n*e.MOON_ORBIT_SPACING+Math.random()*e.MOON_ORBIT_RANDOMNESS,i=2*Math.random()*Math.PI,h=Math.random()*e.MOON_MAX_SIZE_RATIO+e.MOON_MIN_SIZE_RATIO,c=[{type:"Rocky Moon",color:"#9e9e9e",resources:["iron","titanium"]},{type:"Ice Moon",color:"#e3f2fd",resources:["water","frozen_gases"]},{type:"Volcanic Moon",color:"#ff7043",resources:["sulfur","rare_minerals"]},{type:"Dead Moon",color:"#757575",resources:["dust","minerals"]}],_=c[Math.floor(Math.random()*c.length)];o.push({id:t.generate(),name:`${this.name.split(" ")[0]} ${r+1}-${n+1}`,type:_.type,color:_.color,size:h,orbitDistance:s,orbitAngle:i,x:Math.cos(i)*s,y:Math.sin(i)*s,orbitSpeed:2*e.PLANET_BASE_ORBIT_SPEED/Math.sqrt(s),resources:this.generateMoonResources(_),tidallyLocked:Math.random()<e.MOON_TIDAL_LOCK_PROBABILITY})}return o}generateMoonResources(t){const r=[];return t.resources.forEach(t=>{Math.random()<e.RESOURCE_SPAWN_PROBABILITY*e.MOON_RESOURCE_SPAWN_MULTIPLIER&&r.push({type:t,abundance:Math.random()*(e.MAX_RESOURCE_ABUNDANCE*e.MOON_RESOURCE_ABUNDANCE_MULTIPLIER-e.MIN_RESOURCE_ABUNDANCE*e.MOON_RESOURCE_ABUNDANCE_MIN_MULTIPLIER)+e.MIN_RESOURCE_ABUNDANCE*e.MOON_RESOURCE_ABUNDANCE_MIN_MULTIPLIER})}),r}generateAsteroidBelt(){const r=Math.random()*(e.MAX_ASTEROID_BELT_DISTANCE-e.MIN_ASTEROID_BELT_DISTANCE)+e.MIN_ASTEROID_BELT_DISTANCE,a=Math.floor(Math.random()*(e.MAX_ASTEROIDS_PER_BELT-e.MIN_ASTEROIDS_PER_BELT))+e.MIN_ASTEROIDS_PER_BELT,s=[];for(let o=0;o<a;o++){const a=2*Math.random()*Math.PI,o=r+(Math.random()-e.BELT_CENTER_OFFSET)*e.BELT_SPREAD;s.push({id:t.generate(),x:Math.cos(a)*o,y:Math.sin(a)*o,size:Math.random()*(e.MAX_ASTEROID_SIZE-e.MIN_ASTEROID_SIZE)+e.MIN_ASTEROID_SIZE,rotation:Math.random()*e.FULL_CIRCLE_DEGREES,rotationSpeed:2*(Math.random()-e.ROTATION_SPEED_VARIANCE),resources:this.generateAsteroidResources(),orbitSpeed:e.ASTEROID_BASE_ORBIT_SPEED/Math.sqrt(o)})}return{id:t.generate(),centerDistance:r,asteroids:s,density:a/e.BELT_SPREAD}}generateAsteroidResources(){const t=[];return["iron","nickel","rare_metals","crystals","ice"].forEach(r=>{Math.random()<e.ASTEROID_RESOURCE_PROBABILITY&&t.push({type:r,abundance:Math.random()*(e.MAX_ASTEROID_ABUNDANCE-e.MIN_ASTEROID_ABUNDANCE)+e.MIN_ASTEROID_ABUNDANCE})}),t}generateSpaceStation(){const r=[{type:"Trading Post",services:["trading","refuel","repair"]},{type:"Mining Station",services:["trading","mining_equipment","ore_processing"]},{type:"Research Station",services:["technology","ship_upgrades","data"]},{type:"Military Outpost",services:["weapons","armor","security"]},{type:"Refinery",services:["fuel","materials_processing","trading"]}],a=r[Math.floor(Math.random()*r.length)],s=Math.random()*(e.MAX_STATION_DISTANCE-e.MIN_STATION_DISTANCE)+e.MIN_STATION_DISTANCE,o=2*Math.random()*Math.PI;return{id:t.generate(),name:`${a.type} ${Math.floor(Math.random()*e.STATION_NAME_MAX_NUMBER)+1}`,type:a.type,services:a.services,x:Math.cos(o)*s,y:Math.sin(o)*s,faction:this.generateFaction(),inventory:this.generateStationInventory(a),dockingBays:Math.floor(Math.random()*(e.MAX_DOCKING_BAYS-e.MIN_DOCKING_BAYS))+e.MIN_DOCKING_BAYS,population:Math.floor(Math.random()*(e.MAX_STATION_POPULATION-e.MIN_STATION_POPULATION))+e.MIN_STATION_POPULATION}}generateFaction(){const t=["Independent Traders","Mining Consortium","Research Coalition","Security Forces","Colonial Union","Free Merchants"];return t[Math.floor(Math.random()*t.length)]}generateStationInventory(t){const r={"Trading Post":["food","water","fuel","basic_materials","consumer_goods"],"Mining Station":["mining_equipment","industrial_tools","raw_materials","fuel"],"Research Station":["technology","data_cores","research_equipment","rare_materials"],"Military Outpost":["weapons","armor","ammunition","military_supplies"],Refinery:["fuel","refined_materials","chemicals","processed_goods"]},a=r[t.type]||r["Trading Post"],s={};return a.forEach(t=>{s[t]={stock:Math.floor(Math.random()*(e.MAX_STATION_STOCK-e.MIN_STATION_STOCK))+e.MIN_STATION_STOCK,buyPrice:Math.floor(Math.random()*(e.MAX_BUY_PRICE-e.MIN_BUY_PRICE))+e.MIN_BUY_PRICE,sellPrice:Math.floor(Math.random()*(e.MAX_SELL_PRICE-e.MIN_SELL_PRICE))+e.MIN_SELL_PRICE}}),s}generateJumpGate(){const r=Math.random()*(e.MAX_JUMP_GATE_DISTANCE-e.MIN_JUMP_GATE_DISTANCE)+e.MIN_JUMP_GATE_DISTANCE,a=2*Math.random()*Math.PI;return{id:t.generate(),name:`Gate ${Math.floor(Math.random()*e.GATE_NAME_MAX_NUMBER)+1}`,x:Math.cos(a)*r,y:Math.sin(a)*r,destinationSystem:null,isActive:Math.random()<e.GATE_ACTIVE_PROBABILITY,energyCost:Math.floor(Math.random()*(e.MAX_ENERGY_COST-e.MIN_ENERGY_COST))+e.MIN_ENERGY_COST,size:Math.random()*(e.MAX_JUMP_GATE_SIZE-e.MIN_JUMP_GATE_SIZE)+e.MIN_JUMP_GATE_SIZE}}updateOrbits(t){this.planets.forEach(e=>{e.orbitAngle+=e.orbitSpeed*t,e.x=Math.cos(e.orbitAngle)*e.orbitDistance,e.y=Math.sin(e.orbitAngle)*e.orbitDistance,e.moons.forEach(r=>{r.orbitAngle+=r.orbitSpeed*t;const a=Math.cos(r.orbitAngle)*r.orbitDistance,s=Math.sin(r.orbitAngle)*r.orbitDistance;r.x=e.x+a,r.y=e.y+s})}),this.asteroidBelts.forEach(e=>{e.asteroids.forEach(e=>{const r=Math.atan2(e.y,e.x),a=Math.sqrt(e.x*e.x+e.y*e.y),s=r+e.orbitSpeed*t;e.x=Math.cos(s)*a,e.y=Math.sin(s)*a,e.rotation+=e.rotationSpeed*t})})}getSystemInfo(){const t=this.planets.reduce((t,e)=>t+e.moons.length,0);return{id:this.id,name:this.name,coordinates:this.coordinates,star:this.star,planetCount:this.planets.length,moonCount:t,asteroidBeltCount:this.asteroidBelts.length,spaceStationCount:this.spaceStations.length,jumpGateCount:this.jumpGates.length}}getAllBodies(){const t=[];return this.planets.forEach(e=>{t.push(...e.moons)}),{star:this.star,planets:this.planets,moons:t,asteroidBelts:this.asteroidBelts,spaceStations:this.spaceStations,jumpGates:this.jumpGates}}renderSystem(t){const e=t.createElement("g");e.setAttribute("id",`star-system-${this.id}`);const a=t.createElement("circle");return a.setAttribute("cx",this.star.x),a.setAttribute("cy",this.star.y),a.setAttribute("r",this.star.size),a.setAttribute("fill",this.star.color),a.setAttribute("class","star"),e.appendChild(a),this.planets.forEach(r=>{const a=t.createElement("circle");a.setAttribute("cx",r.x),a.setAttribute("cy",r.y),a.setAttribute("r",r.size),a.setAttribute("fill",r.color),a.setAttribute("class","planet"),e.appendChild(a),r.moons.forEach(a=>{const s=t.createElement("circle");s.setAttribute("cx",r.x+a.x),s.setAttribute("cy",r.y+a.y),s.setAttribute("r",a.size*r.size),s.setAttribute("fill",a.color),s.setAttribute("class","moon"),e.appendChild(s)})}),this.asteroidBelts.forEach(r=>{r.asteroids.forEach(r=>{const a=t.createElement("circle");a.setAttribute("cx",r.x),a.setAttribute("cy",r.y),a.setAttribute("r",r.size),a.setAttribute("fill","#8d6e63"),a.setAttribute("class","asteroid"),e.appendChild(a)})}),this.spaceStations.forEach(a=>{const s=t.createElement("rect");s.setAttribute("x",a.x-r.STATION_RENDER_SIZE),s.setAttribute("y",a.y-r.STATION_RENDER_SIZE),s.setAttribute("width",r.STATION_RENDER_WIDTH),s.setAttribute("height",r.STATION_RENDER_HEIGHT),s.setAttribute("fill","#2196f3"),s.setAttribute("class","space-station"),e.appendChild(s)}),this.jumpGates.forEach(a=>{const s=t.createElement("circle");s.setAttribute("cx",a.x),s.setAttribute("cy",a.y),s.setAttribute("r",r.JUMP_GATE_RENDER_RADIUS),s.setAttribute("fill","none"),s.setAttribute("stroke","#9c27b0"),s.setAttribute("stroke-width","3"),s.setAttribute("class","jump-gate"),e.appendChild(s)}),e}findNearestStation(t,r,a=e.DEFAULT_INTERACTION_RANGE){let s=null,o=a;return this.spaceStations.forEach(e=>{const a=Math.sqrt((e.x-t)**2+(e.y-r)**2);a<o&&(s=e,o=a)}),s}findNearestJumpGate(t,r,a=e.DEFAULT_INTERACTION_RANGE){let s=null,o=a;return this.jumpGates.forEach(e=>{const a=Math.sqrt((e.x-t)**2+(e.y-r)**2);a<o&&e.isActive&&(s=e,o=a)}),s}}
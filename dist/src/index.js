import{GraphicsEngine as t}from"./graphics/GraphicsEngine.js";import{ParticleSystem as e}from"./graphics/ParticleSystem.js";import{InputManager as i}from"./input/InputManager.js";import{Camera as a}from"./graphics/Camera.js";import{AudioManager as s}from"./audio/AudioManager.js";import{AuthService as n}from"./auth/AuthService.js";import{AuthUI as r}from"./ui/AuthUI.js";import{TradingSystem as o}from"./trading/TradingSystem.js";import{TradingUI as h}from"./ui/TradingUI.js";import{SpaceNavigation as l}from"./navigation/SpaceNavigation.js";import{RESOURCES as c,WEAPONS as d,PLAYER as p,UI as y}from"./constants.js";class MaxPixelsGame{constructor(){this.gameCanvas=document.getElementById("gameCanvas"),this.uiContainer=document.getElementById("ui"),this.graphics=new t(this.gameCanvas),this.particles=new e(this.graphics),this.input=new i,this.camera=new a(this.gameCanvas),this.audio=new s,this.auth=new n,this.authUI=null,this.trading=new o,this.tradingUI=new h(this.trading,this.auth),this.navigation=new l,this.initializePlayerInventory(),this.isInitialized=!1,this.player={x:960,y:540,velocity:{x:0,y:0},speed:200,radius:25,rotation:0,energy:d.MAX_ENERGY,lastEnergyRegenTime:Date.now()},this.asteroids=[],this.stations=[],this.nearbyStation=null,this.nearbyJumpGate=null,this.interactionRange=80,this.highlightedStation=null,this.highlightedJumpGate=null,this.activeThrusterSound=null,this.ambientSound=null,this.lastFireTime=0,console.log("Max-Pixels initializing..."),this.init()}async init(){try{await this.initializeGraphics(),await this.initializeUI(),this.initializeAudio(),this.startGameLoop(),this.isInitialized=!0,console.log("Max-Pixels initialized successfully"),this.hideLoadingScreen()}catch(t){console.error("Failed to initialize Max-Pixels:",t)}}async initializeGraphics(){console.log("Initializing graphics system...");this.graphics.createLayer("background",1),this.graphics.createLayer("game",5);this.loadCurrentSector();const t=this.graphics.createSpaceship(this.player.x,this.player.y,25,{id:"playerShip"});this.graphics.addToLayer("game",t),this.playerShip=t,this.camera.centerOn(this.player.x,this.player.y)}async initializeUI(){console.log("Initializing UI system..."),this.createHUD(),this.authUI=new r(this.auth,this.uiContainer)}initializeAudio(){console.log("Initializing audio system..."),this.ambientSound=this.audio.playAmbient(),document.addEventListener("click",()=>{this.audio.resumeAudioContext()},{once:!0})}startGameLoop(){console.log("Starting game loop...");const gameLoop=t=>{this.update(t),this.render(t),requestAnimationFrame(gameLoop)};requestAnimationFrame(gameLoop)}loadCurrentSector(){const t=this.navigation.getCurrentSector();if(!t)return;console.log(`Loading sector: ${t.name}`),this.clearSector();const e=this.graphics.getLayer("background");e&&(e.style.backgroundColor=t.backgroundColor);const i=this.graphics.createStarField(200);this.graphics.addToLayer("background",i),this.createAsteroids(t.asteroids,t.bounds),t.planets.forEach(t=>{const e=this.graphics.createPlanet(t.x,t.y,t.radius,{surfaceColor:t.surfaceColor,coreColor:t.coreColor,atmosphereColor:t.atmosphereColor});this.graphics.addToLayer("game",e)}),this.stations=[],t.stations.forEach(t=>{const e=this.graphics.createSpaceStation(t.x,t.y,t.radius,{id:t.id});this.graphics.addToLayer("game",e),this.stations.push(t)}),t.jumpGates.forEach(t=>{const e=this.graphics.createJumpGate(t.x,t.y,t.radius,{id:t.id});this.graphics.addToLayer("game",e)})}clearSector(){this.highlightedStation=null,this.highlightedJumpGate=null,this.nearbyStation=null,this.nearbyJumpGate=null,this.asteroids=[],this.stations=[];const t=this.graphics.getLayer("background"),e=this.graphics.getLayer("game");if(t&&(t.innerHTML=""),e){const t=e.querySelector("#playerShip");e.innerHTML="",t&&e.appendChild(t)}}createAsteroids(t,e){for(let i=0;i<t;i++){const t=Math.random()*e.width,i=Math.random()*e.height,a=30*Math.random()+10,s=`asteroid_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,n={id:s,x:t,y:i,size:a};this.asteroids.push(n);const r=this.graphics.createAsteroid(t,i,a,{id:s});this.graphics.addToLayer("background",r)}}checkCollisions(){for(let t=0;t<this.asteroids.length;t++){const e=this.asteroids[t];if(Math.sqrt(Math.pow(this.player.x-e.x,2)+Math.pow(this.player.y-e.y,2))<this.player.radius+e.size){this.handleCollision(e);break}}}handleCollision(t){this.audio.playCollision(.8),this.particles.createExplosionEffect(t.x,t.y,{particleCount:30,color:"#ff4444",velocity:{min:60,max:120}}),this.particles.createSparksEffect(this.player.x,this.player.y),this.player.x=960,this.player.y=540,this.player.velocity.x=0,this.player.velocity.y=0,this.playerShip.setAttribute("transform",`translate(${this.player.x}, ${this.player.y}) rotate(${this.player.rotation})`),this.playerShip.querySelector("path").setAttribute("fill","#ff4444"),setTimeout(()=>{this.playerShip.querySelector("path").setAttribute("fill","#4a90e2")},200),this.camera.shake(15,500),console.log("Collision detected! Player reset to center.")}checkStationProximity(){let t=null,e=1/0;for(let i of this.stations){const a=Math.sqrt(Math.pow(this.player.x-i.x,2)+Math.pow(this.player.y-i.y,2));a<this.interactionRange&&a<e&&(e=a,t=i)}if(t!==this.highlightedStation){if(this.highlightedStation){const t=this.graphics.svg.querySelector(`#${this.highlightedStation.id}`);t&&this.graphics.removeProximityGlow(t)}if(t){const e=this.graphics.svg.querySelector(`#${t.id}`);e&&this.graphics.addProximityGlow(e,y.PROXIMITY_GLOW_COLOR)}this.highlightedStation=t}t!==this.nearbyStation&&(this.nearbyStation=t,this.updateInteractionPrompt())}interactWithStation(t){console.log(`Interacting with ${t.name}!`),"trading"===t.type&&this.openTradingInterface(t)}openTradingInterface(t){console.log(`Opening trading interface for ${t.name}`),this.tradingUI.openTradingInterface(t)}checkJumpGateProximity(){const t=this.navigation.checkJumpGateProximity(this.player.x,this.player.y,this.interactionRange);if(t!==this.highlightedJumpGate){if(this.highlightedJumpGate){const t=this.graphics.svg.querySelector(`#${this.highlightedJumpGate.id}`);t&&this.graphics.removeProximityGlow(t)}if(t){const e=this.graphics.svg.querySelector(`#${t.id}`);e&&this.graphics.addProximityGlow(e,y.PROXIMITY_GLOW_COLOR)}this.highlightedJumpGate=t}t!==this.nearbyJumpGate&&(this.nearbyJumpGate=t,this.updateInteractionPrompt())}async jumpThroughGate(t){if(!this.navigation.canJump())return void console.log("Jump on cooldown");console.log(`Jumping through ${t.name} to ${t.destination}`);await this.navigation.jumpToSector(t.destination,(t,e)=>{console.log(`Starting jump from ${t} to ${e}`),this.showJumpAnimation()},(t,e)=>{console.log(`Jump complete to ${t}`),this.onSectorChanged(t,e)})||console.error("Jump failed")}showJumpAnimation(){const t=document.createElement("div");t.style.cssText="\n            position: fixed;\n            top: 0; left: 0;\n            width: 100%; height: 100%;\n            background: white;\n            opacity: 0.8;\n            z-index: 1000;\n            pointer-events: none;\n        ",document.body.appendChild(t),setTimeout(()=>{t.style.transition="opacity 0.5s",t.style.opacity="0",setTimeout(()=>{document.body.removeChild(t)},500)},100)}onSectorChanged(t,e){const i=this.navigation.getPlayerSpawnPosition(t);this.player.x=i.x,this.player.y=i.y,this.player.velocity.x=0,this.player.velocity.y=0,this.updatePlayerBounds(),this.loadCurrentSector(),this.graphics.addToLayer("game",this.playerShip),this.playerShip.setAttribute("transform",`translate(${this.player.x}, ${this.player.y}) rotate(${this.player.rotation})`),this.camera.centerOn(this.player.x,this.player.y),console.log(`Now in ${e.name}`)}updateInteractionPrompt(){const t=document.getElementById("interaction-prompt"),e=document.getElementById("station-name"),i=document.getElementById("interaction-text");this.nearbyStation?(t.style.display="block",e.textContent=this.nearbyStation.name,i.textContent="Press F to Dock"):this.nearbyJumpGate?(t.style.display="block",e.textContent=this.nearbyJumpGate.name,i.textContent="Press F to Jump"):t.style.display="none"}update(t){this.handleInput(),this.updatePlayer(),this.updateEnergy(),this.updateThrusterEffects(),this.updateCamera(),this.checkCollisions(),this.checkStationProximity(),this.checkJumpGateProximity(),this.input.update()}handleInput(){const t=this.input.getMovementVector();this.player.velocity.x=t.x,this.player.velocity.y=t.y,this.input.isPressed("boost")&&(this.player.velocity.x*=2,this.player.velocity.y*=2),this.input.justPressed("KeyQ")&&this.camera.zoomOut(),this.input.justPressed("KeyE")&&this.camera.zoomIn(),this.input.justPressed("KeyF")&&(this.nearbyStation?this.interactWithStation(this.nearbyStation):this.nearbyJumpGate&&this.jumpThroughGate(this.nearbyJumpGate)),this.input.isPressed("action")&&this.fireLaser()}updatePlayer(){const t=p.DELTA_TIME;if(0!==this.player.velocity.x||0!==this.player.velocity.y){let t=180*Math.atan2(this.player.velocity.x,-this.player.velocity.y)/Math.PI-this.player.rotation;t>180&&(t-=360),t<-180&&(t+=360),this.player.rotation+=t*p.ROTATION_SMOOTHING,this.player.rotation>180&&(this.player.rotation-=360),this.player.rotation<-180&&(this.player.rotation+=360)}this.player.x+=this.player.velocity.x*this.player.speed*t,this.player.y+=this.player.velocity.y*this.player.speed*t;const e=this.navigation.getSectorBounds();this.player.x=Math.max(25,Math.min(e.width-25,this.player.x)),this.player.y=Math.max(25,Math.min(e.height-25,this.player.y)),this.playerShip.setAttribute("transform",`translate(${this.player.x}, ${this.player.y}) rotate(${this.player.rotation})`)}updatePlayerBounds(){const t=this.navigation.getSectorBounds();this.player.x=Math.max(25,Math.min(t.width-25,this.player.x)),this.player.y=Math.max(25,Math.min(t.height-25,this.player.y))}updateEnergy(){const t=Date.now(),e=(t-this.player.lastEnergyRegenTime)/1e3;this.player.energy<d.MAX_ENERGY&&(this.player.energy=Math.min(d.MAX_ENERGY,this.player.energy+d.ENERGY_REGEN_RATE*e)),this.player.lastEnergyRegenTime=t}updateThrusterEffects(){const t=this.input.getMovementVector(),e=this.input.isPressed("boost"),i=0!==t.x||0!==t.y;if(this.graphics.updateSpaceshipThrusters(this.playerShip,t,e),i){const i=e?1:.6;if(t.y>0){const t=this.player.x,e=this.player.y+30,a=this.player.rotation*Math.PI/180;this.particles.createThrusterTrail(t,e,a,i)}if(0!==t.x){const e=.7*i,a=this.player.rotation*Math.PI/180;if(t.x>0){const t=this.player.x-20*Math.cos(a+Math.PI/2),i=this.player.y-20*Math.sin(a+Math.PI/2);this.particles.createThrusterTrail(t,i,a-Math.PI/2,e)}if(t.x<0){const t=this.player.x+20*Math.cos(a+Math.PI/2),i=this.player.y+20*Math.sin(a+Math.PI/2);this.particles.createThrusterTrail(t,i,a+Math.PI/2,e)}}}if(i){const t=e?1:.6;this.activeThrusterSound?this.activeThrusterSound.setVolume(.6*t):this.activeThrusterSound=this.audio.playThruster(t)}else this.activeThrusterSound&&(this.activeThrusterSound.fadeOut(.3),this.activeThrusterSound=null)}updateCamera(){this.camera.follow(this.player.x,this.player.y),this.camera.update()}render(t){this.updateHUD()}createHUD(){this.uiContainer.insertAdjacentHTML("beforeend",'\n            <div class="hud">\n                <div class="hud-section position">\n                    <h3>Position</h3>\n                    <div>X: <span id="player-x">0</span></div>\n                    <div>Y: <span id="player-y">0</span></div>\n                </div>\n                <div class="hud-section speed">\n                    <h3>Speed</h3>\n                    <div>Velocity: <span id="player-speed">0</span></div>\n                </div>\n                <div class="hud-section energy">\n                    <h3>Energy</h3>\n                    <div>Level: <span id="player-energy">100</span>/100</div>\n                    <div class="energy-bar">\n                        <div id="energy-fill" class="energy-fill"></div>\n                    </div>\n                </div>\n                <div class="hud-section inventory">\n                    <h3>Inventory</h3>\n                    <div>Iron: <span id="inventory-iron">0</span></div>\n                    <div>Copper: <span id="inventory-copper">0</span></div>\n                </div>\n                <div class="hud-section controls">\n                    <h3>Controls</h3>\n                    <div>WASD / Arrow Keys: Move</div>\n                    <div>Shift: Boost</div>\n                    <div>Space: Fire Laser</div>\n                    <div>Q: Zoom Out | E: Zoom In</div>\n                </div>\n                <div class="hud-section camera">\n                    <h3>Camera</h3>\n                    <div>Zoom: <span id="camera-zoom">1.0</span>x</div>\n                </div>\n                <div class="hud-section particles">\n                    <h3>Particles</h3>\n                    <div>Active: <span id="particle-count">0</span></div>\n                </div>\n                <div class="hud-section interaction" id="interaction-prompt" style="display: none;">\n                    <h3>Station Nearby</h3>\n                    <div id="interaction-text">Press F to Dock</div>\n                    <div id="station-name"></div>\n                </div>\n            </div>\n        ')}updateHUD(){document.getElementById("player-x").textContent=Math.round(this.player.x),document.getElementById("player-y").textContent=Math.round(this.player.y);const t=Math.sqrt(this.player.velocity.x**2+this.player.velocity.y**2)*this.player.speed;document.getElementById("player-speed").textContent=Math.round(t);const e=Math.round(this.player.energy),i=this.player.energy/d.MAX_ENERGY*100;document.getElementById("player-energy").textContent=e;const a=document.getElementById("energy-fill");a&&(a.style.width=i+"%",this.player.energy<d.LOW_ENERGY_THRESHOLD?a.style.backgroundColor="#ff4444":this.player.energy<.5*d.MAX_ENERGY?a.style.backgroundColor="#ffaa44":a.style.backgroundColor="#44ff44"),document.getElementById("camera-zoom").textContent=this.camera.zoom.toFixed(1);const s=this.particles.getDebugInfo();document.getElementById("particle-count").textContent=s.activeParticles;const n=this.trading.getPlayerItemQuantity("ore-iron"),r=this.trading.getPlayerItemQuantity("ore-copper");document.getElementById("inventory-iron").textContent=n,document.getElementById("inventory-copper").textContent=r}fireLaser(){const t=Date.now();if(t-this.lastFireTime<d.LASER_FIRE_RATE)return;if(this.player.energy<d.ENERGY_COST)return void console.log("Insufficient energy to fire laser!");this.player.energy-=d.ENERGY_COST,this.lastFireTime=t;const e=this.player.x,i=this.player.y-this.player.radius,a=this.player.x,s=this.player.y-d.LASER_RANGE,n=this.graphics.createLaserBeam(e,i,a,s,{color:d.LASER_COLOR,glowColor:d.LASER_GLOW_COLOR,width:d.LASER_WIDTH,duration:d.LASER_DURATION});this.graphics.addToLayer("game",n),this.checkLaserHits(e,i,a,s),this.audio.playLaser(.4),console.log("Laser fired!")}checkLaserHits(t,e,i,a){for(let s=this.asteroids.length-1;s>=0;s--){const n=this.asteroids[s],r=Math.min(t,i)-n.size,o=Math.max(t,i)+n.size,h=Math.min(e,a)-n.size,l=Math.max(e,a)+n.size;if(n.x<r||n.x>o||n.y<h||n.y>l)continue;if(this.squaredDistanceFromPointToLineSegment(n.x,n.y,t,e,i,a)<n.size*n.size){const t=this.graphics.createLaserImpact(n.x,n.y,{size:d.IMPACT_SIZE,color:d.IMPACT_COLOR,ringColor:d.IMPACT_RING_COLOR,duration:d.IMPACT_DURATION});this.graphics.addToLayer("game",t),this.particles.createExplosionEffect(n.x,n.y,{particleCount:d.HIT_PARTICLE_COUNT,color:d.HIT_COLOR,velocity:{min:d.HIT_VELOCITY_MIN,max:d.HIT_VELOCITY_MAX}}),this.particles.createDebrisField(n.x,n.y,n.size),this.dropAsteroidResources(n),this.destroyAsteroid(n.id),console.log("Asteroid destroyed!");break}}}distanceFromPointToLine(t,e,i,a,s,n){const r=Math.sqrt(Math.pow(s-i,2)+Math.pow(n-a,2));if(0===r)return Math.sqrt(Math.pow(t-i,2)+Math.pow(e-a,2));const o=Math.max(0,Math.min(1,((t-i)*(s-i)+(e-a)*(n-a))/(r*r))),h=i+o*(s-i),l=a+o*(n-a);return Math.sqrt(Math.pow(t-h,2)+Math.pow(e-l,2))}squaredDistanceFromPointToLineSegment(t,e,i,a,s,n){const r=s-i,o=n-a,h=r*r+o*o;if(0===h){const s=t-i,n=e-a;return s*s+n*n}const l=Math.max(0,Math.min(1,((t-i)*r+(e-a)*o)/h)),c=t-(i+l*r),d=e-(a+l*o);return c*c+d*d}destroyAsteroid(t){const e=this.asteroids.findIndex(e=>e.id===t);-1!==e&&this.asteroids.splice(e,1);const i=this.graphics.getLayer("background");if(i){const e=i.querySelector(`#${t}`);e&&this.graphics.remove(e)}}dropAsteroidResources(t){const e=c.ASTEROID_RESOURCE_TYPES[Math.floor(Math.random()*c.ASTEROID_RESOURCE_TYPES.length)],i=Math.floor(t.size/c.RESOURCE_SIZE_DIVIDER)+c.RESOURCE_BASE_QUANTITY;this.trading.addPlayerItem(e,i),this.showResourcePickup(t.x,t.y,e,i),console.log(`Collected ${i}x ${e} from asteroid`)}showResourcePickup(t,e,i,a){const s=document.createElement("div");s.style.cssText=`\n            position: absolute;\n            left: ${t}px;\n            top: ${e}px;\n            color: #00ff00;\n            font-family: monospace;\n            font-size: 14px;\n            font-weight: bold;\n            pointer-events: none;\n            z-index: 1000;\n            text-shadow: 0 0 4px #000;\n            transform: translate(-50%, -50%);\n        `;const n="ore-iron"===i?"Iron":"Copper";s.textContent=`+${a} ${n}`,document.body.appendChild(s);let r=1,o=0;const animateResource=()=>{r-=c.PICKUP_OPACITY_DECAY,o-=c.PICKUP_FLOAT_SPEED,s.style.opacity=r,s.style.transform=`translate(-50%, -50%) translateY(${o}px)`,r>0?requestAnimationFrame(animateResource):document.body.removeChild(s)};requestAnimationFrame(animateResource)}initializePlayerInventory(){this.trading.addPlayerItem("ore-iron",10),this.trading.addPlayerItem("food-rations",5)}hideLoadingScreen(){const t=this.uiContainer.querySelector(".loading");t&&(t.style.opacity="0",setTimeout(()=>{t.style.display="none"},1e3))}}document.addEventListener("DOMContentLoaded",()=>{window.maxPixelsGame=new MaxPixelsGame});
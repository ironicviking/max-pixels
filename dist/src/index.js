import{GraphicsEngine as t}from"./graphics/GraphicsEngine.js";import{ParticleSystem as e}from"./graphics/ParticleSystem.js";import{InputManager as i}from"./input/InputManager.js";import{Camera as a}from"./graphics/Camera.js";import{AudioManager as s}from"./audio/AudioManager.js";import{AuthService as n}from"./auth/AuthService.js";import{AuthUI as r}from"./ui/AuthUI.js";import{TradingSystem as o}from"./trading/TradingSystem.js";import{TradingUI as h}from"./ui/TradingUI.js";import{SpaceNavigation as l}from"./navigation/SpaceNavigation.js";import{NetworkManager as c}from"./network/NetworkManager.js";import{RESOURCES as d,WEAPONS as p,PLAYER as y,UI as g,GRAPHICS as u}from"./constants.js";class MaxPixelsGame{constructor(){this.gameCanvas=document.getElementById("gameCanvas"),this.uiContainer=document.getElementById("ui"),this.graphics=new t(this.gameCanvas),this.particles=new e(this.graphics),this.input=new i,this.camera=new a(this.gameCanvas),this.audio=new s,this.auth=new n,this.authUI=null,this.trading=new o,this.tradingUI=new h(this.trading,this.auth),this.navigation=new l,this.network=new c,this.initializePlayerInventory(),this.initializeNetworking(),this.isInitialized=!1,this.player={x:960,y:540,velocity:{x:0,y:0},speed:200,radius:25,rotation:0,energy:p.MAX_ENERGY,lastEnergyRegenTime:Date.now(),health:y.MAX_HEALTH,lastHealthRegenTime:Date.now(),lastDamageTime:0,isInvincible:!1,invincibilityEndTime:0,isDead:!1,respawnTime:0},this.asteroids=[],this.stations=[],this.nearbyStation=null,this.nearbyJumpGate=null,this.interactionRange=80,this.otherPlayers=new Map,this.highlightedStation=null,this.highlightedJumpGate=null,this.activeThrusterSound=null,this.ambientSound=null,this.lastFireTime=0,this.lastEnergyRechargeSound=0,this.weaponChargeIndicator=null,this.lastServerUpdate=null,console.log("Max-Pixels initializing..."),this.init()}async init(){try{await this.initializeGraphics(),await this.initializeUI(),this.initializeAudio(),this.startGameLoop(),this.isInitialized=!0,console.log("Max-Pixels initialized successfully"),await this.connectToMultiplayer(),this.hideLoadingScreen()}catch(t){console.error("Failed to initialize Max-Pixels:",t)}}async initializeGraphics(){console.log("Initializing graphics system...");this.graphics.createLayer("background",1),this.graphics.createLayer("game",5);this.loadCurrentSector();const t=this.graphics.createSpaceship(this.player.x,this.player.y,25,{id:"playerShip"});this.graphics.addToLayer("game",t),this.playerShip=t;const e=this.player.energy/p.MAX_ENERGY;this.weaponChargeIndicator=this.graphics.createWeaponChargeIndicator(this.player.x,this.player.y,e,{id:"weaponChargeIndicator"}),this.graphics.addToLayer("game",this.weaponChargeIndicator),this.camera.centerOn(this.player.x,this.player.y)}async initializeUI(){console.log("Initializing UI system..."),this.createHUD(),this.authUI=new r(this.auth,this.uiContainer)}initializeAudio(){console.log("Initializing audio system..."),this.ambientSound=this.audio.playAmbient(),document.addEventListener("click",()=>{this.audio.resumeAudioContext()},{once:!0})}startGameLoop(){console.log("Starting game loop...");const gameLoop=t=>{this.update(t),this.render(t),requestAnimationFrame(gameLoop)};requestAnimationFrame(gameLoop)}loadCurrentSector(){const t=this.navigation.getCurrentSector();if(!t)return;console.log(`Loading sector: ${t.name}`),this.clearSector();const e=this.graphics.getLayer("background");if(e&&(e.style.backgroundColor=t.backgroundColor),t.nebulaTypes&&t.nebulaTypes.length>0){const e=this.graphics.createNebulaBackground(t.bounds.width,t.bounds.height,t.nebulaTypes);this.graphics.addToLayer("background",e)}const i=this.graphics.createStarField(200);if(this.graphics.addToLayer("background",i),t.dustDensity&&t.dustDensity>0){const e=this.graphics.createCosmicDustField(t.bounds.width,t.bounds.height,{density:t.dustDensity,particleCount:120});this.graphics.addToLayer("background",e)}if(t.debrisDensity&&t.debrisDensity>0){const e=this.graphics.createSpaceDebrisField(t.bounds.width,t.bounds.height,{density:t.debrisDensity,debrisCount:10+Math.floor(t.bounds.width*t.bounds.height/2e5)});this.graphics.addToLayer("background",e)}this.createAsteroids(t.asteroids,t.bounds),t.planets.forEach(t=>{const e=this.graphics.createPlanet(t.x,t.y,t.radius,{surfaceColor:t.surfaceColor,coreColor:t.coreColor,atmosphereColor:t.atmosphereColor});this.graphics.addToLayer("game",e)}),this.stations=[],t.stations.forEach(t=>{const e=this.graphics.createSpaceStation(t.x,t.y,t.radius,{id:t.id});this.graphics.addToLayer("game",e),this.stations.push(t)}),t.jumpGates.forEach(t=>{const e=this.graphics.createJumpGate(t.x,t.y,t.radius,{id:t.id});this.graphics.addToLayer("game",e)})}clearSector(){this.highlightedStation=null,this.highlightedJumpGate=null,this.nearbyStation=null,this.nearbyJumpGate=null,this.asteroids=[],this.stations=[];const t=this.graphics.getLayer("background"),e=this.graphics.getLayer("game");if(t&&(t.innerHTML=""),e){const t=e.querySelector("#playerShip"),i=Array.from(e.querySelectorAll('[id^="otherPlayer_"]'));e.innerHTML="",t&&e.appendChild(t),i.forEach(t=>e.appendChild(t))}}createAsteroids(t,e){for(let i=0;i<t;i++){const t=Math.random()*e.width,i=Math.random()*e.height,a=30*Math.random()+10,s=`asteroid_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,n={id:s,x:t,y:i,size:a};this.asteroids.push(n);const r=this.graphics.createAsteroid(t,i,a,{id:s});this.graphics.addToLayer("background",r)}}checkCollisions(){for(let t=0;t<this.asteroids.length;t++){const e=this.asteroids[t];if(Math.sqrt(Math.pow(this.player.x-e.x,2)+Math.pow(this.player.y-e.y,2))<this.player.radius+e.size){this.handleCollision(e);break}}}handleCollision(t){this.takeDamage(y.ASTEROID_COLLISION_DAMAGE,"asteroid")&&(this.particles.createExplosionEffect(t.x,t.y,{particleCount:30,colors:["#ff4444","#ff8800","#ffff00","#ffffff","#ffaa44"],velocity:{min:60,max:120}}),this.particles.createSparksEffect(this.player.x,this.player.y),console.log("Collision with asteroid detected!"))}checkStationProximity(){let t=null,e=1/0;for(let i of this.stations){const a=Math.sqrt(Math.pow(this.player.x-i.x,2)+Math.pow(this.player.y-i.y,2));a<this.interactionRange&&a<e&&(e=a,t=i)}if(t!==this.highlightedStation){if(this.highlightedStation){const t=this.graphics.svg.querySelector(`#${this.highlightedStation.id}`);t&&this.graphics.removeProximityGlow(t)}if(t){const e=this.graphics.svg.querySelector(`#${t.id}`);e&&this.graphics.addProximityGlow(e,g.PROXIMITY_GLOW_COLOR)}this.highlightedStation=t}t!==this.nearbyStation&&(this.nearbyStation=t,this.updateInteractionPrompt())}interactWithStation(t){console.log(`Interacting with ${t.name}!`),"trading"===t.type&&this.openTradingInterface(t)}openTradingInterface(t){console.log(`Opening trading interface for ${t.name}`),this.tradingUI.openTradingInterface(t)}checkJumpGateProximity(){const t=this.navigation.checkJumpGateProximity(this.player.x,this.player.y,this.interactionRange);if(t!==this.highlightedJumpGate){if(this.highlightedJumpGate){const t=this.graphics.svg.querySelector(`#${this.highlightedJumpGate.id}`);t&&this.graphics.removeProximityGlow(t)}if(t){const e=this.graphics.svg.querySelector(`#${t.id}`);e&&this.graphics.addProximityGlow(e,g.PROXIMITY_GLOW_COLOR)}this.highlightedJumpGate=t}t!==this.nearbyJumpGate&&(this.nearbyJumpGate=t,this.updateInteractionPrompt())}async jumpThroughGate(t){if(!this.navigation.canJump())return void console.log("Jump on cooldown");console.log(`Jumping through ${t.name} to ${t.destination}`);await this.navigation.jumpToSector(t.destination,(t,e)=>{console.log(`Starting jump from ${t} to ${e}`),this.showJumpAnimation()},(t,e)=>{console.log(`Jump complete to ${t}`),this.onSectorChanged(t,e)})||console.error("Jump failed")}showJumpAnimation(){const t=document.createElement("div");t.style.cssText="\n            position: fixed;\n            top: 0; left: 0;\n            width: 100%; height: 100%;\n            background: white;\n            opacity: 0.8;\n            z-index: 1000;\n            pointer-events: none;\n        ",document.body.appendChild(t),setTimeout(()=>{t.style.transition="opacity 0.5s",t.style.opacity="0",setTimeout(()=>{document.body.removeChild(t)},500)},100)}onSectorChanged(t,e){const i=this.navigation.getPlayerSpawnPosition(t);this.player.x=i.x,this.player.y=i.y,this.player.velocity.x=0,this.player.velocity.y=0,this.updatePlayerBounds(),this.loadCurrentSector(),this.graphics.addToLayer("game",this.playerShip),this.playerShip.setAttribute("transform",`translate(${this.player.x}, ${this.player.y}) rotate(${this.player.rotation})`),this.camera.centerOn(this.player.x,this.player.y),console.log(`Now in ${e.name}`)}updateInteractionPrompt(){const t=document.getElementById("interaction-prompt"),e=document.getElementById("station-name"),i=document.getElementById("interaction-text");this.nearbyStation?(t.style.display="block",e.textContent=this.nearbyStation.name,i.textContent="Press F to Dock"):this.nearbyJumpGate?(t.style.display="block",e.textContent=this.nearbyJumpGate.name,i.textContent="Press F to Jump"):t.style.display="none"}update(t){this.handleInput(),this.updatePlayer(),this.updateEnergy(),this.updateHealth(),this.updateThrusterEffects(),this.updateCamera(),this.checkCollisions(),this.checkStationProximity(),this.checkJumpGateProximity(),this.input.update()}handleInput(){const t=this.input.getMovementVector();this.player.velocity.x=t.x,this.player.velocity.y=t.y,this.input.isPressed("boost")&&(this.player.velocity.x*=2,this.player.velocity.y*=2),this.input.justPressed("KeyQ")&&this.camera.zoomOut(),this.input.justPressed("KeyE")&&this.camera.zoomIn(),this.input.justPressed("KeyF")&&(this.nearbyStation?this.interactWithStation(this.nearbyStation):this.nearbyJumpGate&&this.jumpThroughGate(this.nearbyJumpGate)),this.input.isPressed("action")&&this.fireLaser()}updatePlayer(){const t=y.DELTA_TIME;if(0!==this.player.velocity.x||0!==this.player.velocity.y){let t=180*Math.atan2(this.player.velocity.x,-this.player.velocity.y)/Math.PI-this.player.rotation;t>180&&(t-=360),t<-180&&(t+=360),this.player.rotation+=t*y.ROTATION_SMOOTHING,this.player.rotation>180&&(this.player.rotation-=360),this.player.rotation<-180&&(this.player.rotation+=360)}this.player.x+=this.player.velocity.x*this.player.speed*t,this.player.y+=this.player.velocity.y*this.player.speed*t;const e=this.navigation.getSectorBounds();this.player.x=Math.max(25,Math.min(e.width-25,this.player.x)),this.player.y=Math.max(25,Math.min(e.height-25,this.player.y)),this.playerShip.setAttribute("transform",`translate(${this.player.x}, ${this.player.y}) rotate(${this.player.rotation})`),this.weaponChargeIndicator&&this.weaponChargeIndicator.setAttribute("transform",`translate(${this.player.x}, ${this.player.y})`),this.sendPlayerUpdate()}updatePlayerBounds(){const t=this.navigation.getSectorBounds();this.player.x=Math.max(25,Math.min(t.width-25,this.player.x)),this.player.y=Math.max(25,Math.min(t.height-25,this.player.y))}updateEnergy(){const t=Date.now(),e=(t-this.player.lastEnergyRegenTime)/1e3,i=this.player.energy;if(this.player.energy<p.MAX_ENERGY&&(this.player.energy=Math.min(p.MAX_ENERGY,this.player.energy+p.ENERGY_REGEN_RATE*e),i<p.ENERGY_RECHARGE_SOUND_THRESHOLD&&this.player.energy>=p.ENERGY_RECHARGE_SOUND_THRESHOLD&&t-this.lastEnergyRechargeSound>2e3&&(this.audio.playWeaponRecharge(),this.lastEnergyRechargeSound=t,this.showEnergyRechargeEffect(),console.log("Weapon energy recharged!"))),this.player.lastEnergyRegenTime=t,this.weaponChargeIndicator){const t=this.player.energy/p.MAX_ENERGY;this.graphics.updateWeaponChargeIndicator(this.weaponChargeIndicator,t)}}updateHealth(){const t=Date.now();if(this.player.isInvincible&&t>this.player.invincibilityEndTime&&(this.player.isInvincible=!1,this.removeInvincibilityEffect()),this.player.isDead&&t>this.player.respawnTime)return void this.respawnPlayer();if(this.player.isDead||t-this.player.lastDamageTime<y.HEALTH_REGEN_DELAY)return;const e=(t-this.player.lastHealthRegenTime)/1e3,i=this.player.health;this.player.health<y.MAX_HEALTH&&(this.player.health=Math.min(y.MAX_HEALTH,this.player.health+y.HEALTH_REGEN_RATE*e),i<y.MAX_HEALTH&&this.player.health>=y.MAX_HEALTH&&(this.showHealthRegenEffect(),console.log("Health fully restored!"))),this.player.lastHealthRegenTime=t}takeDamage(t,e="unknown"){return!this.player.isInvincible&&!this.player.isDead&&(this.player.health-=t,this.player.lastDamageTime=Date.now(),this.showDamageEffect(),this.camera.shake(20,600),this.audio.playCollision(.9),console.log(`Player took ${t} damage from ${e}. Health: ${Math.round(this.player.health)}/${y.MAX_HEALTH}`),this.player.health<=0?(this.playerDeath(),!0):(this.player.isInvincible=!0,this.player.invincibilityEndTime=Date.now()+y.INVINCIBILITY_DURATION,this.showInvincibilityEffect(),!0))}playerDeath(){this.player.health=0,this.player.isDead=!0,this.player.respawnTime=Date.now()+y.DEATH_RESPAWN_DELAY,this.player.velocity.x=0,this.player.velocity.y=0,console.log("Player died! Respawning in",y.DEATH_RESPAWN_DELAY/1e3,"seconds..."),this.particles.createExplosionEffect(this.player.x,this.player.y,{particleCount:50,colors:["#ff0000","#ff4444","#ffaa00","#ffffff","#ff8800"],velocity:{min:100,max:200}}),this.playerShip.style.opacity="0",this.showDeathScreen()}respawnPlayer(){this.player.health=y.MAX_HEALTH,this.player.energy=p.MAX_ENERGY,this.player.isDead=!1,this.player.x=y.SPAWN_X,this.player.y=y.SPAWN_Y,this.player.velocity.x=0,this.player.velocity.y=0,this.player.rotation=0,this.player.isInvincible=!0,this.player.invincibilityEndTime=Date.now()+y.INVINCIBILITY_DURATION,this.playerShip.setAttribute("transform",`translate(${this.player.x}, ${this.player.y}) rotate(${this.player.rotation})`),this.playerShip.style.opacity="1",this.camera.centerOn(this.player.x,this.player.y),this.showRespawnEffect(),this.showInvincibilityEffect(),this.hideDeathScreen(),console.log("Player respawned!")}showDamageEffect(){const t=this.playerShip.querySelector("path");if(t){const e=t.getAttribute("fill")||"#4a90e2";t.setAttribute("fill","#ff4444"),setTimeout(()=>{t.setAttribute("fill",e)},200)}}showInvincibilityEffect(){let t=setInterval(()=>{if(!this.player.isInvincible)return clearInterval(t),void(this.playerShip.style.opacity="1");this.playerShip.style.opacity="0.4"===this.playerShip.style.opacity?"1":"0.4"},200)}removeInvincibilityEffect(){this.playerShip.style.opacity="1"}showHealthRegenEffect(){this.particles.createSparksEffect(this.player.x,this.player.y,{colors:["#00ff00","#44ff44","#88ff88"],particleCount:8})}showRespawnEffect(){this.particles.createSparksEffect(this.player.x,this.player.y,{colors:["#00ffff","#44ffff","#88ffff","#ffffff"],particleCount:20})}showDeathScreen(){let t=document.getElementById("death-screen");if(!t){t=document.createElement("div"),t.id="death-screen",t.innerHTML='\n                <div class="death-content">\n                    <h2>SHIP DESTROYED</h2>\n                    <p>Respawning...</p>\n                </div>\n            ',t.style.cssText="\n                position: fixed;\n                top: 0; left: 0;\n                width: 100%; height: 100%;\n                background: rgba(255, 0, 0, 0.3);\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                z-index: 1000;\n                pointer-events: none;\n            ";const e=document.createElement("style");e.textContent="\n                .death-content {\n                    text-align: center;\n                    color: #ffffff;\n                    font-family: 'Courier New', monospace;\n                    text-shadow: 0 0 10px #ff0000;\n                }\n                .death-content h2 {\n                    font-size: 3em;\n                    margin: 0 0 20px 0;\n                    color: #ff4444;\n                }\n                .death-content p {\n                    font-size: 1.5em;\n                    margin: 0;\n                }\n            ",document.head.appendChild(e),document.body.appendChild(t)}t.style.display="flex"}hideDeathScreen(){const t=document.getElementById("death-screen");t&&(t.style.display="none")}showEnergyRechargeEffect(){const t=document.getElementById("energy-fill");if(!t)return;const e=t.style.backgroundColor,i=t.style.boxShadow;t.style.backgroundColor="#00ffff",t.style.boxShadow="0 0 8px #00ffff",t.style.transition="all 0.1s ease-in-out",setTimeout(()=>{t.style.backgroundColor=e||"#44ff44",t.style.boxShadow=i||"",t.style.transition=""},150)}updateThrusterEffects(){const t=this.input.getMovementVector(),e=this.input.isPressed("boost"),i=0!==t.x||0!==t.y;if(this.graphics.updateSpaceshipThrusters(this.playerShip,t,e),i){const i=e?1:.6;if(t.y>0){const t=this.player.x,e=this.player.y+30,a=this.player.rotation*Math.PI/180;this.particles.createThrusterTrail(t,e,a,i)}if(0!==t.x){const e=.7*i,a=this.player.rotation*Math.PI/180;if(t.x>0){const t=this.player.x-20*Math.cos(a+Math.PI/2),i=this.player.y-20*Math.sin(a+Math.PI/2);this.particles.createThrusterTrail(t,i,a-Math.PI/2,e)}if(t.x<0){const t=this.player.x+20*Math.cos(a+Math.PI/2),i=this.player.y+20*Math.sin(a+Math.PI/2);this.particles.createThrusterTrail(t,i,a+Math.PI/2,e)}}}if(i){const t=e?1:.6;this.activeThrusterSound?this.activeThrusterSound.setVolume(.6*t):this.activeThrusterSound=this.audio.playThruster(t)}else this.activeThrusterSound&&(this.activeThrusterSound.fadeOut(.3),this.activeThrusterSound=null)}updateCamera(){this.camera.follow(this.player.x,this.player.y),this.camera.update()}render(t){this.updateHUD()}createHUD(){const t=`\n            <div class="hud">\n                <div class="hud-section position">\n                    <h3>Position</h3>\n                    <div>X: <span id="player-x">0</span></div>\n                    <div>Y: <span id="player-y">0</span></div>\n                </div>\n                <div class="hud-section speed">\n                    <h3>Speed</h3>\n                    <div>Velocity: <span id="player-speed">0</span></div>\n                </div>\n                <div class="hud-section health">\n                    <h3>Health</h3>\n                    <div>HP: <span id="player-health">100</span>/100</div>\n                    <div class="health-bar">\n                        <div id="health-fill" class="health-fill"></div>\n                    </div>\n                </div>\n                <div class="hud-section energy">\n                    <h3>Energy</h3>\n                    <div>Level: <span id="player-energy">100</span>/100</div>\n                    <div class="energy-bar">\n                        <div id="energy-fill" class="energy-fill"></div>\n                    </div>\n                </div>\n                <div class="hud-section inventory">\n                    <h3>Inventory</h3>\n                    <div>Iron: <span id="inventory-iron">0</span></div>\n                    <div>Copper: <span id="inventory-copper">0</span></div>\n                </div>\n                <div class="hud-section controls">\n                    <h3>Controls</h3>\n                    <div>WASD / Arrow Keys: Move</div>\n                    <div>Shift: Boost</div>\n                    <div>Space: Fire Laser</div>\n                    <div>Q: Zoom Out | E: Zoom In</div>\n                </div>\n                <div class="hud-section camera">\n                    <h3>Camera</h3>\n                    <div>Zoom: <span id="camera-zoom">1.0</span>x</div>\n                </div>\n                <div class="hud-section particles">\n                    <h3>Particles</h3>\n                    <div>Active: <span id="particle-count">0</span></div>\n                </div>\n                <div class="hud-section radar">\n                    <h3>Local Radar</h3>\n                    <div class="radar-container">\n                        <svg id="radar-display" width="${u.RADAR_DEFAULT_SIZE}" height="${u.RADAR_DEFAULT_SIZE}"></svg>\n                    </div>\n                </div>\n                <div class="hud-section interaction" id="interaction-prompt" style="display: none;">\n                    <h3>Station Nearby</h3>\n                    <div id="interaction-text">Press F to Dock</div>\n                    <div id="station-name"></div>\n                </div>\n            </div>\n        `;this.uiContainer.insertAdjacentHTML("beforeend",t),this.initializeRadar()}initializeRadar(){const e=document.getElementById("radar-display");if(!e)return;this.radarEngine=new t(e);const i=u.RADAR_DEFAULT_SIZE/2,a=u.RADAR_DEFAULT_SIZE/2,s=u.RADAR_DEFAULT_SIZE/2-5;this.radar=this.radarEngine.createRadar(i,a,s,{id:"hud-radar",backgroundColor:"#001122",borderColor:"#00ff88",gridColor:"#004466",scanlineColor:"#00ff88"}),this.radarEngine.addToLayer("ui",this.radar)}updateRadar(){if(!this.radar)return;const t=this.radar.querySelector("#hud-radar_blips");if(!t)return;t.innerHTML="";const e=u.RADAR_DEFAULT_SIZE/2,i=u.RADAR_DEFAULT_SIZE/2,a=u.RADAR_DEFAULT_SIZE/2-5,s=u.RADAR_RANGE,n=this.radarEngine.createCircle(e,i,u.RADAR_PLAYER_BLIP_SIZE,{fill:"#00ff88",opacity:1,id:"player-blip"});t.appendChild(n),this.asteroids.forEach(n=>{if(Math.sqrt(Math.pow(n.x-this.player.x,2)+Math.pow(n.y-this.player.y,2))<=s){const r=(n.x-this.player.x)/s*a,o=(n.y-this.player.y)/s*a,h=e+r,l=i+o,c=this.radarEngine.createCircle(h,l,u.RADAR_ASTEROID_BLIP_SIZE,{fill:"#cc8800",opacity:.8});t.appendChild(c)}}),this.stations.forEach(n=>{if(Math.sqrt(Math.pow(n.x-this.player.x,2)+Math.pow(n.y-this.player.y,2))<=s){const r=(n.x-this.player.x)/s*a,o=(n.y-this.player.y)/s*a,h=e+r,l=i+o,c=this.radarEngine.createCircle(h,l,u.RADAR_STATION_BLIP_SIZE,{fill:"#00aaff",opacity:1});t.appendChild(c)}}),this.otherPlayers.forEach((n,r)=>{if(Math.sqrt(Math.pow(n.x-this.player.x,2)+Math.pow(n.y-this.player.y,2))<=s){const r=(n.x-this.player.x)/s*a,o=(n.y-this.player.y)/s*a,h=e+r,l=i+o,c=this.radarEngine.createCircle(h,l,u.RADAR_PLAYER_BLIP_SIZE,{fill:n.color||"#ff6b35",opacity:.9});t.appendChild(c)}})}updateHUD(){document.getElementById("player-x").textContent=Math.round(this.player.x),document.getElementById("player-y").textContent=Math.round(this.player.y);const t=Math.sqrt(this.player.velocity.x**2+this.player.velocity.y**2)*this.player.speed;document.getElementById("player-speed").textContent=Math.round(t);const e=Math.round(this.player.health),i=this.player.health/y.MAX_HEALTH*100;document.getElementById("player-health").textContent=e;const a=document.getElementById("health-fill");a&&(a.style.width=i+"%",this.player.health<=y.CRITICAL_HEALTH_THRESHOLD?(a.style.backgroundColor="#ff0000",a.style.boxShadow="0 0 8px #ff0000"):this.player.health<=y.LOW_HEALTH_THRESHOLD?(a.style.backgroundColor="#ff4444",a.style.boxShadow="0 0 4px #ff4444"):this.player.health<.5*y.MAX_HEALTH?(a.style.backgroundColor="#ffaa44",a.style.boxShadow=""):(a.style.backgroundColor="#44ff44",a.style.boxShadow=""));const s=Math.round(this.player.energy),n=this.player.energy/p.MAX_ENERGY*100;document.getElementById("player-energy").textContent=s;const r=document.getElementById("energy-fill");r&&(r.style.width=n+"%",this.player.energy<p.LOW_ENERGY_THRESHOLD?r.style.backgroundColor="#ff4444":this.player.energy<.5*p.MAX_ENERGY?r.style.backgroundColor="#ffaa44":r.style.backgroundColor="#44ff44"),document.getElementById("camera-zoom").textContent=this.camera.zoom.toFixed(1);const o=this.particles.getDebugInfo();document.getElementById("particle-count").textContent=o.activeParticles;const h=this.trading.getPlayerItemQuantity("ore-iron"),l=this.trading.getPlayerItemQuantity("ore-copper");document.getElementById("inventory-iron").textContent=h,document.getElementById("inventory-copper").textContent=l,this.updateRadar()}fireLaser(){const t=Date.now();if(t-this.lastFireTime<p.LASER_FIRE_RATE)return;if(this.player.energy<p.ENERGY_COST)return void console.log("Insufficient energy to fire laser!");this.player.energy-=p.ENERGY_COST,this.lastFireTime=t;const e=this.player.rotation*Math.PI/180,i=this.player.x+Math.sin(e)*this.player.radius,a=this.player.y-Math.cos(e)*this.player.radius,s=this.player.x+Math.sin(e)*p.LASER_RANGE,n=this.player.y-Math.cos(e)*p.LASER_RANGE,r=this.graphics.createLaserBeam(i,a,s,n,{color:p.LASER_COLOR,glowColor:p.LASER_GLOW_COLOR,width:p.LASER_WIDTH,duration:p.LASER_DURATION});if(this.graphics.addToLayer("game",r),this.checkLaserHits(i,a,s,n),this.audio.playLaser(.4),this.weaponChargeIndicator){const t=this.player.energy/p.MAX_ENERGY;this.graphics.updateWeaponChargeIndicator(this.weaponChargeIndicator,t)}this.sendFireAction(),console.log("Laser fired!")}checkLaserHits(t,e,i,a){for(let s=this.asteroids.length-1;s>=0;s--){const n=this.asteroids[s],r=Math.min(t,i)-n.size,o=Math.max(t,i)+n.size,h=Math.min(e,a)-n.size,l=Math.max(e,a)+n.size;if(n.x<r||n.x>o||n.y<h||n.y>l)continue;if(this.squaredDistanceFromPointToLineSegment(n.x,n.y,t,e,i,a)<n.size*n.size){const t=this.graphics.createLaserImpact(n.x,n.y,{size:p.IMPACT_SIZE,color:p.IMPACT_COLOR,ringColor:p.IMPACT_RING_COLOR,duration:p.IMPACT_DURATION});this.graphics.addToLayer("game",t),this.particles.createExplosionEffect(n.x,n.y,{particleCount:p.HIT_PARTICLE_COUNT,colors:["#ff8800","#ffff00","#ff4444","#ffffff","#ffcc00","#ff6600"],velocity:{min:p.HIT_VELOCITY_MIN,max:p.HIT_VELOCITY_MAX}}),this.particles.createDebrisField(n.x,n.y,n.size),this.dropAsteroidResources(n),this.destroyAsteroid(n.id),console.log("Asteroid destroyed!");break}}}distanceFromPointToLine(t,e,i,a,s,n){const r=Math.sqrt(Math.pow(s-i,2)+Math.pow(n-a,2));if(0===r)return Math.sqrt(Math.pow(t-i,2)+Math.pow(e-a,2));const o=Math.max(0,Math.min(1,((t-i)*(s-i)+(e-a)*(n-a))/(r*r))),h=i+o*(s-i),l=a+o*(n-a);return Math.sqrt(Math.pow(t-h,2)+Math.pow(e-l,2))}squaredDistanceFromPointToLineSegment(t,e,i,a,s,n){const r=s-i,o=n-a,h=r*r+o*o;if(0===h){const s=t-i,n=e-a;return s*s+n*n}const l=Math.max(0,Math.min(1,((t-i)*r+(e-a)*o)/h)),c=t-(i+l*r),d=e-(a+l*o);return c*c+d*d}destroyAsteroid(t){const e=this.asteroids.findIndex(e=>e.id===t);-1!==e&&this.asteroids.splice(e,1);const i=this.graphics.getLayer("background");if(i){const e=i.querySelector(`#${t}`);e&&this.graphics.remove(e)}}dropAsteroidResources(t){const e=d.ASTEROID_RESOURCE_TYPES[Math.floor(Math.random()*d.ASTEROID_RESOURCE_TYPES.length)],i=Math.floor(t.size/d.RESOURCE_SIZE_DIVIDER)+d.RESOURCE_BASE_QUANTITY;this.trading.addPlayerItem(e,i),this.showResourcePickup(t.x,t.y,e,i),console.log(`Collected ${i}x ${e} from asteroid`)}showResourcePickup(t,e,i,a){const s=document.createElement("div");s.style.cssText=`\n            position: absolute;\n            left: ${t}px;\n            top: ${e}px;\n            color: #00ff00;\n            font-family: monospace;\n            font-size: 14px;\n            font-weight: bold;\n            pointer-events: none;\n            z-index: 1000;\n            text-shadow: 0 0 4px #000;\n            transform: translate(-50%, -50%);\n        `;const n="ore-iron"===i?"Iron":"Copper";s.textContent=`+${a} ${n}`,document.body.appendChild(s);let r=1,o=0;const animateResource=()=>{r-=d.PICKUP_OPACITY_DECAY,o-=d.PICKUP_FLOAT_SPEED,s.style.opacity=r,s.style.transform=`translate(-50%, -50%) translateY(${o}px)`,r>0?requestAnimationFrame(animateResource):document.body.removeChild(s)};requestAnimationFrame(animateResource)}initializePlayerInventory(){this.trading.addPlayerItem("ore-iron",10),this.trading.addPlayerItem("food-rations",5)}hideLoadingScreen(){const t=this.uiContainer.querySelector(".loading");t&&(t.style.opacity="0",setTimeout(()=>{t.style.display="none"},1e3))}initializeNetworking(){this.network.onConnection("connected",()=>{console.log("Connected to multiplayer server"),this.showNetworkStatus("Connected","success")}),this.network.onConnection("disconnected",()=>{console.log("Disconnected from multiplayer server"),this.showNetworkStatus("Disconnected","warning")}),this.network.onConnection("error",t=>{console.error("Network connection error:",t),this.showNetworkStatus("Connection Error","error")}),this.network.onConnection("reconnectFailed",()=>{console.error("Failed to reconnect to server"),this.showNetworkStatus("Offline Mode","info")}),this.network.on(this.network.MessageTypes.PLAYER_JOIN,t=>{this.handlePlayerJoin(t)}),this.network.on(this.network.MessageTypes.PLAYER_LEAVE,t=>{this.handlePlayerLeave(t)}),this.network.on(this.network.MessageTypes.PLAYER_MOVE,t=>{this.handlePlayerMove(t)}),this.network.on(this.network.MessageTypes.PLAYER_FIRE,t=>{this.handlePlayerFire(t)}),this.network.on(this.network.MessageTypes.CHAT_MESSAGE,t=>{this.handleChatMessage(t)}),this.network.on(this.network.MessageTypes.GAME_STATE,t=>{this.handleGameState(t)})}async connectToMultiplayer(t="ws://localhost:8080"){try{const e=this.auth.getCurrentUser()?.username||null;return await this.network.connect(t,e),!0}catch(t){return console.error("Failed to connect to multiplayer server:",t),this.showNetworkStatus("Failed to Connect","error"),!1}}disconnectFromMultiplayer(){this.network.disconnect()}sendPlayerUpdate(){this.network.isConnected&&this.network.sendPlayerMovement({x:this.player.x,y:this.player.y},this.player.velocity,this.player.rotation)}sendFireAction(){this.network.isConnected&&this.network.sendPlayerFire({x:this.player.x,y:this.player.y},this.player.rotation,"laser")}handlePlayerJoin(t){console.log(`Player ${t.playerId} joined the game`);const e=["#ff6b35","#f7931e","#ffd700","#32cd32","#00ced1","#9370db","#ff69b4"],i=e[Array.from(this.otherPlayers.keys()).length%e.length],a={id:t.playerId,x:t.position?.x||500,y:t.position?.y||500,rotation:t.rotation||0,color:i,lastUpdate:Date.now()},s=this.graphics.createOtherPlayerShip(a.x,a.y,t.playerId,i);this.graphics.addToLayer("game",s),this.otherPlayers.set(t.playerId,a),console.log(`Added visual representation for player ${t.playerId}`)}handlePlayerLeave(t){console.log(`Player ${t.playerId} left the game`);const e=this.graphics.svg.querySelector(`#otherPlayer_${t.playerId}`);e&&(this.graphics.remove(e),console.log(`Removed visual representation for player ${t.playerId}`)),this.otherPlayers.delete(t.playerId)}handlePlayerMove(t){const e=this.otherPlayers.get(t.playerId);if(!e)return;e.x=t.position.x,e.y=t.position.y,e.rotation=t.rotation||e.rotation,e.lastUpdate=Date.now();const i=this.graphics.svg.querySelector(`#otherPlayer_${t.playerId}`);i&&i.setAttribute("transform",`translate(${e.x}, ${e.y}) rotate(${e.rotation})`),console.log(`Updated player ${t.playerId} position to (${e.x}, ${e.y})`)}handlePlayerFire(t){const e=this.otherPlayers.get(t.playerId);if(!e)return;console.log(`Player ${t.playerId} fired weapon`);const i=e.rotation*Math.PI/180,a=e.x+20*Math.sin(i),s=e.y-20*Math.cos(i),n=e.x+400*Math.sin(i),r=e.y-400*Math.cos(i),o=this.graphics.createLaserBeam(a,s,n,r,{color:"#00ff88",glowColor:"#88ffaa",width:3,duration:300});this.graphics.addToLayer("game",o),this.audio.playLaser(.2)}handleChatMessage(t){console.log(`Chat from ${t.playerId}: ${t.message}`),this.displayChatMessage(t.playerId,t.message)}displayChatMessage(t,e){let i=document.getElementById("chat-container");i||(i=this.createChatContainer());const a=document.createElement("div");a.className="chat-message",a.innerHTML=`<span class="chat-player">${t}:</span> <span class="chat-text">${e}</span>`,i.appendChild(a),i.scrollTop=i.scrollHeight;const s=i.querySelectorAll(".chat-message");s.length>50&&s[0].remove(),setTimeout(()=>{a.classList.add("fade-out"),setTimeout(()=>{a.parentNode&&a.remove()},1e3)},1e4)}createChatContainer(){const t=document.createElement("div");t.id="chat-container",t.className="chat-container";const e=document.createElement("style");return e.textContent="\n            .chat-container {\n                position: absolute;\n                bottom: 20px;\n                left: 20px;\n                width: 350px;\n                height: 200px;\n                background: rgba(0, 50, 100, 0.9);\n                border: 1px solid #4488ff;\n                border-radius: 8px;\n                padding: 10px;\n                overflow-y: auto;\n                backdrop-filter: blur(5px);\n                z-index: 100;\n                font-family: 'Courier New', monospace;\n                font-size: 13px;\n            }\n            \n            .chat-message {\n                margin-bottom: 8px;\n                padding: 4px 8px;\n                background: rgba(255, 255, 255, 0.05);\n                border-radius: 4px;\n                border-left: 3px solid #4488ff;\n                opacity: 1;\n                transition: opacity 1s ease-out;\n            }\n            \n            .chat-message.fade-out {\n                opacity: 0;\n            }\n            \n            .chat-player {\n                color: #88ccff;\n                font-weight: bold;\n            }\n            \n            .chat-text {\n                color: #ffffff;\n                word-wrap: break-word;\n            }\n            \n            .chat-container::-webkit-scrollbar {\n                width: 6px;\n            }\n            \n            .chat-container::-webkit-scrollbar-track {\n                background: rgba(255, 255, 255, 0.1);\n                border-radius: 3px;\n            }\n            \n            .chat-container::-webkit-scrollbar-thumb {\n                background: #4488ff;\n                border-radius: 3px;\n            }\n            \n            .chat-container::-webkit-scrollbar-thumb:hover {\n                background: #88ccff;\n            }\n        ",document.head.appendChild(e),document.getElementById("ui").appendChild(t),t}handleGameState(t){t&&"object"==typeof t?(console.log("Received game state update:",t),t.players&&"object"==typeof t.players&&this.updateOtherPlayersFromState(t.players),t.gameObjects&&Array.isArray(t.gameObjects)&&this.updateGameObjectsFromState(t.gameObjects),t.lastUpdate&&(this.lastServerUpdate=t.lastUpdate,console.log(`Game state synced with server (timestamp: ${t.lastUpdate})`))):console.warn("Invalid game state data received:",t)}updateOtherPlayersFromState(t){let e;if(t instanceof Map)e=t;else{if("object"!=typeof t)return void console.warn("Invalid players data format:",t);e=new Map(Object.entries(t))}for(const[t,i]of this.otherPlayers.entries())e.has(t)||this.handlePlayerLeave({playerId:t});for(const[t,i]of e.entries()){if(t===this.network.playerId)continue;this.otherPlayers.get(t)?this.handlePlayerMove({playerId:t,position:i.position||{x:i.x,y:i.y},rotation:i.rotation||0}):this.handlePlayerJoin({playerId:t,position:i.position||{x:i.x,y:i.y},rotation:i.rotation||0})}}updateGameObjectsFromState(t){if(console.log(`Received ${t.length} game objects from server:`,t),!Array.isArray(t))return void console.warn("Invalid gameObjects data received");const e=t.filter(t=>"asteroid"===t.type),i=t.filter(t=>"station"===t.type);this.synchronizeAsteroids(e),this.synchronizeStations(i)}synchronizeAsteroids(t){const e=this.graphics.getLayer("background");if(!e)return;const i=new Set(t.map(t=>t.id));this.asteroids=this.asteroids.filter(t=>{if(!i.has(t.id)){const i=e.querySelector(`#${t.id}`);return i&&e.removeChild(i),console.log(`Removed asteroid ${t.id} (deleted on server)`),!1}return!0}),t.forEach(t=>{const i=this.asteroids.findIndex(e=>e.id===t.id);if(i>=0){const a=this.asteroids[i];if(a.x!==t.x||a.y!==t.y||a.size!==t.size){this.asteroids[i]={...t};const a=e.querySelector(`#${t.id}`);a&&a.setAttribute("transform",`translate(${t.x}, ${t.y})`)}}else{this.asteroids.push({...t});const e=this.graphics.createAsteroid(t.x,t.y,t.size,{id:t.id});this.graphics.addToLayer("background",e),console.log(`Added new asteroid ${t.id} from server`)}})}synchronizeStations(t){const e=this.graphics.getLayer("game");if(!e)return;const i=new Set(t.map(t=>t.id));this.stations=this.stations.filter(t=>{if(!i.has(t.id)){const i=e.querySelector(`#${t.id}`);return i&&e.removeChild(i),console.log(`Removed station ${t.id} (deleted on server)`),!1}return!0}),t.forEach(t=>{const i=this.stations.findIndex(e=>e.id===t.id);if(i>=0){const a=this.stations[i];if(a.x!==t.x||a.y!==t.y){this.stations[i]={...t};const a=e.querySelector(`#${t.id}`);a&&a.setAttribute("transform",`translate(${t.x}, ${t.y})`)}}else{this.stations.push({...t});const e=this.graphics.createSpaceStation(t.x,t.y,t.radius||40,{id:t.id});this.graphics.addToLayer("game",e),console.log(`Added new station ${t.id} from server`)}})}showNetworkStatus(t,e="info"){let i=document.getElementById("network-status");i||(i=document.createElement("div"),i.id="network-status",i.style.cssText="\n                position: fixed;\n                top: 10px;\n                right: 10px;\n                padding: 8px 12px;\n                border-radius: 4px;\n                font-size: 12px;\n                font-family: monospace;\n                z-index: 1000;\n                transition: opacity 0.3s ease;\n            ",document.body.appendChild(i));const a={success:{bg:"#4CAF50",text:"#ffffff"},warning:{bg:"#FF9800",text:"#ffffff"},error:{bg:"#F44336",text:"#ffffff"},info:{bg:"#2196F3",text:"#ffffff"}},s=a[e]||a.info;i.style.backgroundColor=s.bg,i.style.color=s.text,i.textContent=t,i.style.opacity="1","success"===e&&setTimeout(()=>{i.style.opacity="0.7"},3e3)}}document.addEventListener("DOMContentLoaded",()=>{window.maxPixelsGame=new MaxPixelsGame});
const e=3,s=20,t=6,r=36,a=9,n=24,i=60,o=60,u=1e3,l=5;export class AuthService{constructor(){this.currentUser=null,this.token=this.getStorageItem("maxPixelsToken"),this.apiBase="/api/auth",this.users=JSON.parse(this.getStorageItem("maxPixelsUsers")||"{}"),this.token&&this.validateToken()}getStorageItem(e){try{return"undefined"!=typeof localStorage?localStorage.getItem(e):null}catch{return null}}setStorageItem(e,s){try{"undefined"!=typeof localStorage&&localStorage.setItem(e,s)}catch{}}removeStorageItem(e){try{"undefined"!=typeof localStorage&&localStorage.removeItem(e)}catch{}}async register(e,s,t){try{if(this.validateRegistrationData(e,s,t),this.users[e]||this.findUserByEmail(s))throw new Error("Username or email already exists");const r={id:this.generateUserId(),username:e,email:s,passwordHash:this.hashPassword(t),createdAt:(new Date).toISOString(),level:1,experience:0,credits:1e3};return this.users[e]=r,this.setStorageItem("maxPixelsUsers",JSON.stringify(this.users)),await this.login(e,t),{success:!0,message:"Registration successful",user:this.sanitizeUser(r)}}catch(e){return{success:!1,message:e.message}}}async login(e,s){try{const t=this.users[e];if(!t)throw new Error("Invalid username or password");if(!this.verifyPassword(s,t.passwordHash))throw new Error("Invalid username or password");const r=this.generateToken(t);return this.token=r,this.currentUser=t,this.setStorageItem("maxPixelsToken",r),{success:!0,message:"Login successful",user:this.sanitizeUser(t),token:r}}catch(e){return{success:!1,message:e.message}}}logout(){return this.currentUser=null,this.token=null,this.removeStorageItem("maxPixelsToken"),{success:!0,message:"Logged out successfully"}}validateToken(){if(!this.token)return!1;try{const e=JSON.parse(atob(this.token.split(".")[1]));if(e.exp<Date.now())return this.logout(),!1;const s=this.users[e.username];return s?(this.currentUser=s,!0):(this.logout(),!1)}catch{return this.logout(),!1}}getCurrentUser(){return Boolean(this.currentUser)?this.sanitizeUser(this.currentUser):null}getUsername(){return this.currentUser?this.currentUser.username:null}isAuthenticated(){return Boolean(this.currentUser)}isLoggedIn(){return this.isAuthenticated()}isGuest(){return Boolean(this.currentUser&&!0===this.currentUser.isGuest)}async loginAsGuest(e="Guest"){try{const s={id:"guest_"+Date.now()+"_"+Math.random().toString(r).substr(2,a),username:e,email:null,passwordHash:null,createdAt:(new Date).toISOString(),level:1,experience:0,credits:1e3,isGuest:!0};this.currentUser=s;const t=this.generateToken(s);return this.token=t,{success:!0,message:"Guest login successful",user:this.sanitizeUser(s),token:t}}catch(e){return{success:!1,message:e.message}}}validateRegistrationData(r,a,n){if(!r||r.length<e||r.length>s)throw new Error(`Username must be between ${e} and ${s} characters`);if(!/^[a-zA-Z0-9_]+$/.test(r))throw new Error("Username can only contain letters, numbers, and underscores");if(!a||!this.isValidEmail(a))throw new Error("Please enter a valid email address");if(!n||n.length<t)throw new Error(`Password must be at least ${t} characters long`)}isValidEmail(e){return/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(e)}generateUserId(){return"user_"+Date.now()+"_"+Math.random().toString(r).substr(2,a)}generateToken(e){return`${btoa(JSON.stringify({alg:"HS256",typ:"JWT"}))}.${btoa(JSON.stringify({username:e.username,userId:e.id,exp:Date.now()+n*i*o*u}))}.${btoa("maxpixels_"+e.username)}`}hashPassword(e){let s=0;for(let t=0;t<e.length;t++){const r=e.charCodeAt(t);s=(s<<l)-s+r,s&=s}return s.toString()}verifyPassword(e,s){return this.hashPassword(e)===s}findUserByEmail(e){return Object.values(this.users).find(s=>s.email===e)}sanitizeUser(e){const{passwordHash:s,...t}=e;return t}}
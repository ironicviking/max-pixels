import{NAVIGATION as t}from"../constants.js";export class SpaceNavigation{constructor(){this.currentSector="alpha-sector",this.sectors=new Map,this.jumpGates=new Map,this.isJumping=!1,this.jumpCooldown=2e3,this.lastJumpTime=0,this.initializeSectors()}initializeSectors(){this.sectors.set("alpha-sector",{id:"alpha-sector",name:"Alpha Sector",bounds:{width:1920,height:1080},description:"A peaceful trading hub with abundant resources",backgroundColor:"#000814",stations:[{id:"tradingStation",x:800,y:600,radius:40,type:"trading",name:"Trading Outpost Alpha"}],planets:[{x:1200,y:300,radius:60,surfaceColor:"#8b4513",coreColor:"#654321",atmosphereColor:"#4488ff"}],asteroids:15,jumpGates:[{id:"alpha-to-beta",x:1800,y:540,radius:50,destination:"beta-sector",name:"Beta Sector Gate"}]}),this.sectors.set("beta-sector",{id:"beta-sector",name:"Beta Sector",bounds:{width:2400,height:1400},description:"Rich mining sector with dangerous asteroid fields",backgroundColor:"#1a0e0e",stations:[{id:"miningStation",x:400,y:700,radius:35,type:"mining",name:"Mining Outpost Beta"}],planets:[{x:1800,y:400,radius:80,surfaceColor:"#cc4125",coreColor:"#8b1538",atmosphereColor:"#ff6b35"}],asteroids:25,jumpGates:[{id:"beta-to-alpha",x:200,y:700,radius:50,destination:"alpha-sector",name:"Alpha Sector Gate"},{id:"beta-to-gamma",x:2200,y:200,radius:50,destination:"gamma-sector",name:"Gamma Sector Gate"}]}),this.sectors.set("gamma-sector",{id:"gamma-sector",name:"Gamma Sector",bounds:{width:2800,height:1600},description:"Frontier sector with unknown dangers and opportunities",backgroundColor:"#0e1a0e",stations:[{id:"researchStation",x:1400,y:800,radius:45,type:"research",name:"Research Station Gamma"}],planets:[{x:600,y:300,radius:45,surfaceColor:"#2d5016",coreColor:"#1a2e0a",atmosphereColor:"#4d8c2a"},{x:2200,y:1200,radius:70,surfaceColor:"#4a4a4a",coreColor:"#2a2a2a",atmosphereColor:"#6a6a6a"}],asteroids:20,jumpGates:[{id:"gamma-to-beta",x:100,y:100,radius:50,destination:"beta-sector",name:"Beta Sector Gate"}]}),this.buildJumpGateMap()}buildJumpGateMap(){this.sectors.forEach(t=>{t.jumpGates.forEach(e=>{this.jumpGates.set(e.id,{...e,currentSector:t.id})})})}getCurrentSector(){return this.sectors.get(this.currentSector)}getSectorData(t){return this.sectors.get(t)}getAllSectors(){return Array.from(this.sectors.values())}canJump(){const t=Date.now();return!this.isJumping&&t-this.lastJumpTime>=this.jumpCooldown}checkJumpGateProximity(e,o,r=t.PROXIMITY_CHECK_RANGE){const s=this.getCurrentSector();if(!s)return null;for(const t of s.jumpGates){if(Math.sqrt(Math.pow(e-t.x,2)+Math.pow(o-t.y,2))<r)return t}return null}async jumpToSector(e,o=null,r=null){if(!this.canJump())return console.log("Jump on cooldown or already jumping"),!1;const s=this.sectors.get(e);return s?(this.isJumping=!0,this.lastJumpTime=Date.now(),console.log(`Jumping from ${this.currentSector} to ${e}`),o&&o(this.currentSector,e),await new Promise(e=>setTimeout(e,t.JUMP_COOLDOWN)),this.currentSector=e,this.isJumping=!1,r&&r(e,s),!0):(console.error(`Sector ${e} not found`),!1)}getPlayerSpawnPosition(e){const o=this.sectors.get(e);if(!o)return{x:t.SPAWN_OFFSET,y:t.SPAWN_OFFSET};const r=o.jumpGates.find(t=>t.destination!==e);return r?{x:r.x+t.SPAWN_OFFSET,y:r.y}:{x:Math.min(t.GATE_SPAWN_X,o.bounds.width*t.GATE_SPAWN_MARGIN),y:Math.min(t.GATE_SPAWN_Y,o.bounds.height*t.GATE_SPAWN_MARGIN)}}getJumpGateInfo(t){return this.jumpGates.get(t)}isValidSector(t){return this.sectors.has(t)}getSectorBounds(t=null){const e=t?this.sectors.get(t):this.getCurrentSector();return e?e.bounds:{width:1920,height:1080}}getSectorDescription(t=null){const e=t?this.sectors.get(t):this.getCurrentSector();return e?`${e.name}: ${e.description}`:"Unknown sector"}}
import{SOCIAL as e}from"../constants.js";export class PlayerList{constructor(){this.players=new Map,this.localPlayerId=null,this.lastUpdateTime=0,this.container=null,this.isVisible=!1,this.initializeUI()}initializeUI(){this.container=document.createElement("div"),this.container.id="player-list",this.container.className="player-list-container",this.container.style.cssText="\n            position: fixed;\n            top: 20px;\n            right: 20px;\n            width: 250px;\n            background: rgba(0, 20, 40, 0.9);\n            border: 1px solid #4a90e2;\n            border-radius: 8px;\n            padding: 15px;\n            color: white;\n            font-family: 'Courier New', monospace;\n            font-size: 12px;\n            z-index: 1000;\n            display: none;\n            max-height: 400px;\n            overflow-y: auto;\n        ";const e=document.createElement("div");e.innerHTML='\n            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">\n                <h3 style="margin: 0; color: #4a90e2;">Players Online</h3>\n                <button id="close-player-list" style="background: none; border: none; color: #888; cursor: pointer;">√ó</button>\n            </div>\n        ',this.container.appendChild(e);const t=document.createElement("div");t.id="players",this.container.appendChild(t),document.body.appendChild(this.container),document.getElementById("close-player-list").addEventListener("click",()=>{this.hide()})}setLocalPlayer(e){this.localPlayerId=e}updatePlayer(e,t){const i=Date.now();this.players.set(e,{...t,lastSeen:i,isOnline:!0}),this.lastUpdateTime=i,this.isVisible&&this.renderPlayerList()}removePlayer(e){this.players.delete(e),this.isVisible&&this.renderPlayerList()}setPlayerOffline(e){const t=this.players.get(e);t&&(t.isOnline=!1,t.lastSeen=Date.now(),this.isVisible&&this.renderPlayerList())}getOnlinePlayers(){const e=[];for(const[t,i]of this.players)i.isOnline&&t!==this.localPlayerId&&e.push({id:t,...i});return e.sort((e,t)=>e.username.localeCompare(t.username))}getRecentPlayers(){const t=[],i=Date.now()-e.RECENT_PLAYER_CUTOFF_MINUTES*e.SECONDS_PER_MINUTE*e.MILLISECONDS_PER_SECOND;for(const[e,n]of this.players)!n.isOnline&&n.lastSeen>i&&e!==this.localPlayerId&&t.push({id:e,...n});return t.sort((e,t)=>t.lastSeen-e.lastSeen)}show(){this.isVisible=!0,this.container.style.display="block",this.renderPlayerList()}hide(){this.isVisible=!1,this.container.style.display="none"}toggle(){this.isVisible?this.hide():this.show()}renderPlayerList(){const t=document.getElementById("players");if(!t)return;const i=this.getOnlinePlayers(),n=this.getRecentPlayers();let s="";i.length>0?(s+='<div style="margin-bottom: 15px;">',s+=`<div style="color: #4a90e2; font-weight: bold; margin-bottom: 5px;">Online (${i.length})</div>`,i.forEach(t=>{const i=(t.health||0)/(t.maxHealth||e.DEFAULT_MAX_HEALTH)*e.DEFAULT_MAX_HEALTH,n=(t.shield||0)/(t.maxShield||e.DEFAULT_MAX_SHIELD)*e.DEFAULT_MAX_SHIELD;s+=`\n                    <div style="margin: 5px 0; padding: 8px; background: rgba(74, 144, 226, 0.1); border-radius: 4px; cursor: pointer;"\n                         onclick="playerList.focusPlayer('${t.id}')">\n                        <div style="display: flex; justify-content: space-between; align-items: center;">\n                            <span style="color: #00ff88; font-weight: bold;">${t.username||t.id}</span>\n                            <span style="color: #888; font-size: 10px;">${this.getPlayerStatus(t)}</span>\n                        </div>\n                        <div style="margin-top: 4px;">\n                            <div style="display: flex; gap: 5px; font-size: 10px;">\n                                <div title="Health">‚ù§Ô∏è ${Math.round(i)}%</div>\n                                <div title="Shield">üõ°Ô∏è ${Math.round(n)}%</div>\n                                ${t.currentSystem?`<div title="System">üåå ${t.currentSystem}</div>`:""}\n                            </div>\n                        </div>\n                    </div>\n                `}),s+="</div>"):s+='<div style="color: #888; font-style: italic; margin-bottom: 15px;">No other players online</div>',n.length>0&&(s+="<div>",s+='<div style="color: #888; font-weight: bold; margin-bottom: 5px;">Recently Seen</div>',n.forEach(e=>{const t=this.formatTimeSince(e.lastSeen);s+=`\n                    <div style="margin: 3px 0; padding: 5px; background: rgba(136, 136, 136, 0.1); border-radius: 4px; font-size: 11px;">\n                        <div style="display: flex; justify-content: space-between;">\n                            <span style="color: #ccc;">${e.username||e.id}</span>\n                            <span style="color: #888;">${t} ago</span>\n                        </div>\n                    </div>\n                `}),s+="</div>"),""===s&&(s='<div style="color: #888; font-style: italic;">No players found</div>'),t.innerHTML=s}getPlayerStatus(e){return e.isAlive?e.boosting?"üöÄ Boosting":e.thrust>0?"‚ö° Moving":e.shieldsActive?"üõ°Ô∏è Shielded":"‚ö™ Idle":"üíÄ Dead"}formatTimeSince(t){const i=Math.floor((Date.now()-t)/e.MILLISECONDS_PER_SECOND);return i<e.SECONDS_PER_MINUTE?`${i}s`:i<e.SECONDS_PER_HOUR?`${Math.floor(i/e.SECONDS_PER_MINUTE)}m`:i<e.SECONDS_PER_DAY?`${Math.floor(i/e.SECONDS_PER_HOUR)}h`:`${Math.floor(i/e.SECONDS_PER_DAY)}d`}focusPlayer(e){const t=this.players.get(e);t&&t.isOnline&&(console.log("Focusing on player:",t.username||e,t),document.dispatchEvent(new CustomEvent("focusPlayer",{detail:{playerId:e,player:t}})))}getStats(){return{online:this.getOnlinePlayers().length,recent:this.getRecentPlayers().length,total:this.players.size,localPlayer:this.localPlayerId}}cleanup(){const t=Date.now()-e.PLAYER_CLEANUP_CUTOFF_MINUTES*e.SECONDS_PER_MINUTE*e.MILLISECONDS_PER_SECOND;for(const[e,i]of this.players)!i.isOnline&&i.lastSeen<t&&this.players.delete(e)}handleNetworkMessage(e,t){switch(e){case"player_join":t.playerId&&t.playerId!==this.localPlayerId&&this.updatePlayer(t.playerId,{username:t.username||t.playerId,...t});break;case"player_leave":t.playerId&&this.setPlayerOffline(t.playerId);break;case"player_move":t.playerId&&t.playerId!==this.localPlayerId&&this.updatePlayer(t.playerId,t);break;case"game_state":t.players&&t.players.forEach(e=>{e.id!==this.localPlayerId&&this.updatePlayer(e.id,e)})}}}export const playerList=new PlayerList;window.playerList=playerList;
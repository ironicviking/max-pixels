export class IDGenerator{constructor(e="max-pixels"){this.seed=e,this.counter=0,this.sectorCounters=new Map}hash(e){let t=0;for(let r=0;r<e.length;r++){t=(t<<5)-t+e.charCodeAt(r),t&=t}return Math.abs(t)}generateObjectId(e,t,r){const n=`${this.seed}-${t}-${e}-${r}`;return`${e}_${t}_${this.hash(n).toString(36)}_${r}`}generateSectorId(e,t){this.sectorCounters.has(e)||this.sectorCounters.set(e,new Map);const r=this.sectorCounters.get(e),n=(r.get(t)||0)+1;return r.set(t,n),this.generateObjectId(t,e,n)}generateGlobalId(e){this.counter++;const t=Date.now().toString(36),r=this.counter.toString(36);return`${e}_${t}_${this.hash(`${this.seed}-global-${e}-${this.counter}`).toString(36)}_${r}`}generateAsteroidIds(e,t){const r=[];for(let n=0;n<t;n++)r.push(this.generateObjectId("asteroid",e,n));return r}generateStationIds(e,t){return t.map((t,r)=>({...t,uniqueId:this.generateObjectId("station",e,r),stationType:t.id,id:this.generateObjectId("station",e,r)}))}generatePlanetIds(e,t){return t.map((t,r)=>({...t,id:this.generateObjectId("planet",e,r)}))}generateJumpGateIds(e,t){return t.map((t,r)=>({...t,uniqueId:this.generateObjectId("jumpgate",e,r),gateType:t.id,id:this.generateObjectId("jumpgate",e,r)}))}isValidId(e){if("string"!=typeof e||0===e.length)return!1;const t=e.split("_");return t.length>=3&&t[0].length>0}getObjectType(e){return this.isValidId(e)?e.split("_")[0]:null}reset(){this.counter=0,this.sectorCounters.clear()}static generate(){return gameIDGenerator.generateGlobalId("player")}}export const gameIDGenerator=new IDGenerator("max-pixels-v1");
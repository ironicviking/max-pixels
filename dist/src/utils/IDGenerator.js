export class IDGenerator{constructor(t="max-pixels"){this.seed=t,this.counter=0,this.sectorCounters=new Map}hash(t){let e=0;for(let r=0;r<t.length;r++){e=(e<<5)-e+t.charCodeAt(r),e&=e}return Math.abs(e)}generateObjectId(t,e,r){const s=`${this.seed}-${e}-${t}-${r}`;return`${t}_${e}_${this.hash(s).toString(36)}_${r}`}generateSectorId(t,e){this.sectorCounters.has(t)||this.sectorCounters.set(t,new Map);const r=this.sectorCounters.get(t),s=(r.get(e)||0)+1;return r.set(e,s),this.generateObjectId(e,t,s)}generateGlobalId(t){this.counter++;const e=Date.now().toString(36),r=this.counter.toString(36);return`${t}_${e}_${this.hash(`${this.seed}-global-${t}-${this.counter}`).toString(36)}_${r}`}generateAsteroidIds(t,e){const r=[];for(let s=0;s<e;s++)r.push(this.generateObjectId("asteroid",t,s));return r}generateStationIds(t,e){return e.map((e,r)=>({...e,uniqueId:this.generateObjectId("station",t,r),stationType:e.id,id:this.generateObjectId("station",t,r)}))}generatePlanetIds(t,e){return e.map((e,r)=>({...e,id:this.generateObjectId("planet",t,r)}))}generateJumpGateIds(t,e){return e.map((e,r)=>({...e,uniqueId:this.generateObjectId("jumpgate",t,r),gateType:e.id,id:this.generateObjectId("jumpgate",t,r)}))}isValidId(t){if("string"!=typeof t||0===t.length)return!1;const e=t.split("_");return e.length>=3&&e[0].length>0}getObjectType(t){return this.isValidId(t)?t.split("_")[0]:null}reset(){this.counter=0,this.sectorCounters.clear()}}export const gameIDGenerator=new IDGenerator("max-pixels-v1");
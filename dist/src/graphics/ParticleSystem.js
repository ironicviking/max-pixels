const t={COUNT:20,LIFE:2e3,EMISSION_RATE:10,SPREAD:2*Math.PI,SIZE_MIN:2,SIZE_MAX:6,OPACITY_START:1,OPACITY_END:0,GRAVITY:{x:0,y:0},WIND:{x:0,y:0},VELOCITY_MIN:50,VELOCITY_MAX:100,OFFSET:10,FPS:60,FRAME_TIME:16};export class ParticleSystem{constructor(t){this.graphics=t,this.particles=new Map,this.activeEmitters=new Map,this.idCounter=0,this.updateInterval=null,this.startUpdateLoop()}createEmitter(e,i,a={}){const r="emitter_"+ ++this.idCounter,s={particleCount:t.COUNT,particleLife:t.LIFE,emissionRate:t.EMISSION_RATE,spread:t.SPREAD,velocity:{min:t.VELOCITY_MIN,max:t.VELOCITY_MAX},size:{min:t.SIZE_MIN,max:t.SIZE_MAX},color:"#ffffff",opacity:{start:t.OPACITY_START,end:t.OPACITY_END},gravity:t.GRAVITY,wind:t.WIND,fadeOut:!0,shrink:!1,burst:!1,duration:-1,...a},c={id:r,x:e,y:i,config:s,particles:[],lastEmission:0,startTime:Date.now(),active:!0};return this.activeEmitters.set(r,c),s.burst&&this.burstEmit(c),r}createExplosionEffect(t,e,i={}){const a={particleCount:25,particleLife:1500,spread:2*Math.PI,velocity:{min:80,max:150},size:{min:3,max:8},color:"#ff6600",opacity:{start:.9,end:0},gravity:{x:0,y:20},fadeOut:!0,shrink:!0,burst:!0,duration:0,...i};return this.createEmitter(t,e,a)}createThrusterTrail(t,e,i,a=1){const r={particleCount:Math.floor(15*a),particleLife:800,emissionRate:20*a,spread:.3*Math.PI,velocity:{min:30*a,max:60*a},size:{min:2,max:4},color:a>.8?"#00aaff":"#0066ff",opacity:{start:.8,end:0},direction:i+Math.PI,fadeOut:!0,shrink:!0,burst:!1,duration:500};return this.createEmitter(t,e,r)}createDebrisField(t,e,i){const a={particleCount:Math.floor(i/2),particleLife:3e3,spread:2*Math.PI,velocity:{min:20,max:80},size:{min:1,max:4},color:"#8b7355",opacity:{start:.8,end:0},gravity:{x:0,y:10},fadeOut:!0,burst:!0,duration:0};return this.createEmitter(t,e,a)}createSparksEffect(t,e,i=0){const a={particleCount:15,particleLife:800,spread:.8*Math.PI,velocity:{min:100,max:200},size:{min:1,max:3},color:"#ffff00",opacity:{start:1,end:0},direction:i,gravity:{x:0,y:50},fadeOut:!0,burst:!0,duration:0};return this.createEmitter(t,e,a)}burstEmit(t){for(let e=0;e<t.config.particleCount;e++)this.createParticle(t)}createParticle(t){const e=t.config,i="particle_"+ ++this.idCounter,a=(e.direction||0)+(Math.random()-.5)*e.spread,r=e.velocity.min+Math.random()*(e.velocity.max-e.velocity.min),s=Math.cos(a)*r,c=Math.sin(a)*r,o=e.size.min+Math.random()*(e.size.max-e.size.min),n={id:i,x:t.x+10*(Math.random()-.5),y:t.y+10*(Math.random()-.5),velX:s,velY:c,size:o,originalSize:o,color:e.color,opacity:e.opacity.start,life:e.particleLife,maxLife:e.particleLife,startTime:Date.now()},l=this.graphics.createCircle(n.x,n.y,n.size,{id:i,fill:n.color,opacity:n.opacity});return this.graphics.addToLayer("game",l),n.element=l,this.particles.set(i,n),t.particles.push(n),n}update(){const t=Date.now(),e=1/60;for(const[,e]of this.activeEmitters)if(e.active)if(e.config.duration>0&&t-e.startTime>e.config.duration)e.active=!1;else if(!e.config.burst&&e.active){t-e.lastEmission>=1e3/e.config.emissionRate&&(this.createParticle(e),e.lastEmission=t)}for(const[t,i]of this.particles){i.x+=i.velX*e,i.y+=i.velY*e;const a=this.getParticleEmitter(i);a&&(i.velX+=a.config.gravity.x*e,i.velY+=a.config.gravity.y*e,i.velX+=a.config.wind.x*e,i.velY+=a.config.wind.y*e),i.life-=16;const r=i.life/i.maxLife;if(a&&a.config.fadeOut){const t=a.config.opacity.start-a.config.opacity.end;i.opacity=a.config.opacity.end+r*t}a&&a.config.shrink&&(i.size=i.originalSize*r),i.element&&(i.element.setAttribute("cx",i.x),i.element.setAttribute("cy",i.y),i.element.setAttribute("r",Math.max(.5,i.size)),i.element.setAttribute("opacity",Math.max(0,i.opacity))),i.life<=0&&this.removeParticle(t)}for(const[t,e]of this.activeEmitters)e.active||0!==e.particles.length||this.activeEmitters.delete(t)}getParticleEmitter(t){for(const e of this.activeEmitters.values())if(e.particles.includes(t))return e;return null}removeParticle(t){const e=this.particles.get(t);if(!e)return;e.element&&this.graphics.remove(e.element);const i=this.getParticleEmitter(e);if(i){const t=i.particles.indexOf(e);t>-1&&i.particles.splice(t,1)}this.particles.delete(t)}removeEmitter(t){const e=this.activeEmitters.get(t);if(e){for(const t of[...e.particles])this.removeParticle(t.id);this.activeEmitters.delete(t)}}startUpdateLoop(){this.updateInterval||(this.updateInterval=setInterval(()=>{this.update()},16))}stopUpdateLoop(){this.updateInterval&&(clearInterval(this.updateInterval),this.updateInterval=null)}clear(){for(const t of this.particles.keys())this.removeParticle(t);this.activeEmitters.clear(),this.idCounter=0}getDebugInfo(){return{activeEmitters:this.activeEmitters.size,activeParticles:this.particles.size,totalCreatedParticles:this.idCounter}}}
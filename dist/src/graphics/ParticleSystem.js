import{PARTICLES as t,GRAPHICS as e}from"../constants.js";const i={COUNT:20,LIFE:2e3,EMISSION_RATE:10,SPREAD:e.PI_TIMES_2,SIZE_MIN:2,SIZE_MAX:6,OPACITY_START:1,OPACITY_END:0,GRAVITY:{x:0,y:0},WIND:{x:0,y:0},VELOCITY_MIN:50,VELOCITY_MAX:100,OFFSET:10};export class ParticleSystem{constructor(t){this.graphics=t,this.particles=new Map,this.activeEmitters=new Map,this.idCounter=0,this.animationFrameId=null,this.startUpdateLoop()}createEmitter(t,e,a={}){const r="emitter_"+ ++this.idCounter,s={particleCount:i.COUNT,particleLife:i.LIFE,emissionRate:i.EMISSION_RATE,spread:i.SPREAD,velocity:{min:i.VELOCITY_MIN,max:i.VELOCITY_MAX},size:{min:i.SIZE_MIN,max:i.SIZE_MAX},color:"#ffffff",opacity:{start:i.OPACITY_START,end:i.OPACITY_END},gravity:i.GRAVITY,wind:i.WIND,fadeOut:!0,shrink:!1,burst:!1,duration:-1,...a},o={id:r,x:t,y:e,config:s,particles:[],lastEmission:0,startTime:Date.now(),active:!0};return this.activeEmitters.set(r,o),s.burst&&this.burstEmit(o),r}createExplosionEffect(i,a,r={}){const s=r.colors||["#ff4444","#ff8800","#ffff00","#ffffff"],o={particleCount:t.EXPLOSION_PARTICLE_COUNT,particleLife:t.EXPLOSION_LIFE,spread:e.PI_TIMES_2,velocity:{min:t.EXPLOSION_VELOCITY_MIN,max:t.EXPLOSION_VELOCITY_MAX},size:{min:t.EXPLOSION_SIZE_MIN,max:t.EXPLOSION_SIZE_MAX},colors:s,opacity:{start:t.EXPLOSION_OPACITY_START,end:0},gravity:{x:0,y:t.EXPLOSION_GRAVITY_Y},fadeOut:!0,shrink:!0,burst:!0,duration:0,...r};return this.createEmitter(i,a,o)}createThrusterTrail(e,i,a,r=1){const s={particleCount:Math.floor(t.THRUSTER_BASE_PARTICLES*r),particleLife:t.THRUSTER_LIFE,emissionRate:t.THRUSTER_BASE_EMISSION_RATE*r,spread:Math.PI*t.THRUSTER_SPREAD,velocity:{min:t.THRUSTER_VELOCITY_BASE*r,max:t.THRUSTER_VELOCITY_RANGE*r},size:{min:t.THRUSTER_SIZE_MIN,max:t.THRUSTER_SIZE_MAX},color:r>t.THRUSTER_HIGH_INTENSITY?"#00aaff":"#0066ff",opacity:{start:t.THRUSTER_OPACITY_START,end:0},direction:a+Math.PI,fadeOut:!0,shrink:!0,burst:!1,duration:t.THRUSTER_DURATION};return this.createEmitter(e,i,s)}createDebrisField(i,a,r){const s={particleCount:Math.floor(r/t.DEBRIS_SIZE_DIVISOR),particleLife:t.DEBRIS_LIFE,spread:e.PI_TIMES_2,velocity:{min:t.DEBRIS_VELOCITY_MIN,max:t.DEBRIS_VELOCITY_MAX},size:{min:t.DEBRIS_SIZE_MIN,max:t.DEBRIS_SIZE_MAX},color:"#8b7355",opacity:{start:t.DEBRIS_OPACITY_START,end:0},gravity:{x:0,y:t.DEBRIS_GRAVITY_Y},fadeOut:!0,burst:!0,duration:0};return this.createEmitter(i,a,s)}createSparksEffect(e,i,a={}){let r;r="number"==typeof a?{direction:a}:a;const s=r.colors||["#ffff00"],o=1===s.length?s[0]:"#ffff00",c={particleCount:r.particleCount||t.SPARKS_COUNT,particleLife:t.SPARKS_LIFE,spread:Math.PI*t.SPARKS_SPREAD,velocity:{min:t.SPARKS_VELOCITY_MIN,max:t.SPARKS_VELOCITY_MAX},size:{min:t.SPARKS_SIZE_MIN,max:t.SPARKS_SIZE_MAX},colors:s,color:o,opacity:{start:1,end:0},direction:r.direction||0,gravity:{x:0,y:t.SPARKS_GRAVITY_Y},fadeOut:!0,burst:!0,duration:0,...r};return this.createEmitter(e,i,c)}createEnergyRechargeEffect(i,a,r={}){const s={particleCount:r.particleCount||t.ENERGY_RECHARGE_COUNT,particleLife:r.particleLife||t.ENERGY_RECHARGE_LIFE,spread:e.PI_TIMES_2,velocity:r.velocity||{min:t.ENERGY_RECHARGE_VELOCITY_MIN,max:t.ENERGY_RECHARGE_VELOCITY_MAX},size:r.size||{min:t.ENERGY_RECHARGE_SIZE_MIN,max:t.ENERGY_RECHARGE_SIZE_MAX},colors:r.colors||["#00ffff","#44ffff","#88ffff","#ffffff"],opacity:{start:.9,end:0},gravity:{x:0,y:t.ENERGY_RECHARGE_GRAVITY_Y},wind:{x:0,y:0},fadeOut:!0,shrink:!0,burst:!0,duration:0,...r};return this.createEmitter(i,a,s)}burstEmit(t){for(let e=0;e<t.config.particleCount;e++)this.createParticle(t)}createParticle(e){const i=e.config,a="particle_"+ ++this.idCounter,r=(i.direction||0)+(Math.random()-t.RANDOM_OFFSET_RANGE)*i.spread,s=i.velocity.min+Math.random()*(i.velocity.max-i.velocity.min),o=Math.cos(r)*s,c=Math.sin(r)*s,n=i.size.min+Math.random()*(i.size.max-i.size.min),E=i.colors?i.colors[Math.floor(Math.random()*i.colors.length)]:i.color,l={id:a,x:e.x+(Math.random()-t.RANDOM_OFFSET_RANGE)*t.POSITION_OFFSET,y:e.y+(Math.random()-t.RANDOM_OFFSET_RANGE)*t.POSITION_OFFSET,velX:o,velY:c,size:n,originalSize:n,color:E,opacity:i.opacity.start,life:i.particleLife,maxLife:i.particleLife,startTime:Date.now()},f=this.graphics.createCircle(l.x,l.y,l.size,{id:a,fill:l.color,opacity:l.opacity});return this.graphics.addToLayer("game",f),l.element=f,this.particles.set(a,l),e.particles.push(l),l}update(){const e=Date.now(),i=t.DELTA_TIME_60FPS;for(const[,i]of this.activeEmitters)if(i.active)if(i.config.duration>0&&e-i.startTime>i.config.duration)i.active=!1;else if(!i.config.burst&&i.active){e-i.lastEmission>=t.EMISSION_TIME_MS/i.config.emissionRate&&(this.createParticle(i),i.lastEmission=e)}const a=[],r=[];for(const[e,s]of this.particles){s.x+=s.velX*i,s.y+=s.velY*i;const o=this.getParticleEmitter(s);o&&(s.velX+=o.config.gravity.x*i,s.velY+=o.config.gravity.y*i,s.velX+=o.config.wind.x*i,s.velY+=o.config.wind.y*i),s.life-=t.FRAME_TIME;const c=s.life/s.maxLife;if(o&&o.config.fadeOut){const t=o.config.opacity.start-o.config.opacity.end;s.opacity=o.config.opacity.end+c*t}o&&o.config.shrink&&(s.size=s.originalSize*c),s.element&&a.push({element:s.element,x:s.x,y:s.y,size:Math.max(t.SIZE_MIN_RENDER,s.size),opacity:Math.max(0,s.opacity)}),s.life<=0&&r.push(e)}this.applyBatchedUpdates(a);for(const t of r)this.removeParticle(t);for(const[t,e]of this.activeEmitters)e.active||0!==e.particles.length||this.activeEmitters.delete(t)}applyBatchedUpdates(t){if(0!==t.length)for(const e of t)e.element.setAttribute("cx",e.x),e.element.setAttribute("cy",e.y),e.element.setAttribute("r",e.size),e.element.setAttribute("opacity",e.opacity)}getParticleEmitter(t){for(const e of this.activeEmitters.values())if(e.particles.includes(t))return e;return null}removeParticle(t){const e=this.particles.get(t);if(!e)return;e.element&&this.graphics.remove(e.element);const i=this.getParticleEmitter(e);if(i){const t=i.particles.indexOf(e);t>-1&&i.particles.splice(t,1)}this.particles.delete(t)}removeEmitter(t){const e=this.activeEmitters.get(t);if(e){for(const t of[...e.particles])this.removeParticle(t.id);this.activeEmitters.delete(t)}}startUpdateLoop(){if(this.animationFrameId)return;const updateLoop=()=>{this.update(),this.animationFrameId=requestAnimationFrame(updateLoop)};this.animationFrameId=requestAnimationFrame(updateLoop)}stopUpdateLoop(){this.animationFrameId&&(cancelAnimationFrame(this.animationFrameId),this.animationFrameId=null)}clear(){for(const t of this.particles.keys())this.removeParticle(t);this.activeEmitters.clear(),this.idCounter=0}getDebugInfo(){return{activeEmitters:this.activeEmitters.size,activeParticles:this.particles.size,totalCreatedParticles:this.idCounter}}}
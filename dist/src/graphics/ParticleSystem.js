import{PARTICLES as t}from"../constants.js";const e={COUNT:20,LIFE:2e3,EMISSION_RATE:10,SPREAD:2*Math.PI,SIZE_MIN:2,SIZE_MAX:6,OPACITY_START:1,OPACITY_END:0,GRAVITY:{x:0,y:0},WIND:{x:0,y:0},VELOCITY_MIN:50,VELOCITY_MAX:100,OFFSET:10,FPS:60,FRAME_TIME:16};export class ParticleSystem{constructor(t){this.graphics=t,this.particles=new Map,this.activeEmitters=new Map,this.idCounter=0,this.updateInterval=null,this.startUpdateLoop()}createEmitter(t,i,a={}){const r="emitter_"+ ++this.idCounter,s={particleCount:e.COUNT,particleLife:e.LIFE,emissionRate:e.EMISSION_RATE,spread:e.SPREAD,velocity:{min:e.VELOCITY_MIN,max:e.VELOCITY_MAX},size:{min:e.SIZE_MIN,max:e.SIZE_MAX},color:"#ffffff",opacity:{start:e.OPACITY_START,end:e.OPACITY_END},gravity:e.GRAVITY,wind:e.WIND,fadeOut:!0,shrink:!1,burst:!1,duration:-1,...a},c={id:r,x:t,y:i,config:s,particles:[],lastEmission:0,startTime:Date.now(),active:!0};return this.activeEmitters.set(r,c),s.burst&&this.burstEmit(c),r}createExplosionEffect(e,i,a={}){const r={particleCount:t.EXPLOSION_PARTICLE_COUNT,particleLife:t.EXPLOSION_LIFE,spread:2*Math.PI,velocity:{min:t.EXPLOSION_VELOCITY_MIN,max:t.EXPLOSION_VELOCITY_MAX},size:{min:t.EXPLOSION_SIZE_MIN,max:t.EXPLOSION_SIZE_MAX},color:"#ff6600",opacity:{start:t.EXPLOSION_OPACITY_START,end:0},gravity:{x:0,y:t.EXPLOSION_GRAVITY_Y},fadeOut:!0,shrink:!0,burst:!0,duration:0,...a};return this.createEmitter(e,i,r)}createThrusterTrail(e,i,a,r=1){const s={particleCount:Math.floor(t.THRUSTER_BASE_PARTICLES*r),particleLife:t.THRUSTER_LIFE,emissionRate:t.THRUSTER_BASE_EMISSION_RATE*r,spread:Math.PI*t.THRUSTER_SPREAD,velocity:{min:t.THRUSTER_VELOCITY_BASE*r,max:t.THRUSTER_VELOCITY_RANGE*r},size:{min:t.THRUSTER_SIZE_MIN,max:t.THRUSTER_SIZE_MAX},color:r>t.THRUSTER_HIGH_INTENSITY?"#00aaff":"#0066ff",opacity:{start:t.THRUSTER_OPACITY_START,end:0},direction:a+Math.PI,fadeOut:!0,shrink:!0,burst:!1,duration:t.THRUSTER_DURATION};return this.createEmitter(e,i,s)}createDebrisField(e,i,a){const r={particleCount:Math.floor(a/t.DEBRIS_SIZE_DIVISOR),particleLife:t.DEBRIS_LIFE,spread:2*Math.PI,velocity:{min:t.DEBRIS_VELOCITY_MIN,max:t.DEBRIS_VELOCITY_MAX},size:{min:t.DEBRIS_SIZE_MIN,max:t.DEBRIS_SIZE_MAX},color:"#8b7355",opacity:{start:t.DEBRIS_OPACITY_START,end:0},gravity:{x:0,y:t.DEBRIS_GRAVITY_Y},fadeOut:!0,burst:!0,duration:0};return this.createEmitter(e,i,r)}createSparksEffect(e,i,a=0){const r={particleCount:t.SPARKS_COUNT,particleLife:t.SPARKS_LIFE,spread:Math.PI*t.SPARKS_SPREAD,velocity:{min:t.SPARKS_VELOCITY_MIN,max:t.SPARKS_VELOCITY_MAX},size:{min:t.SPARKS_SIZE_MIN,max:t.SPARKS_SIZE_MAX},color:"#ffff00",opacity:{start:1,end:0},direction:a,gravity:{x:0,y:t.SPARKS_GRAVITY_Y},fadeOut:!0,burst:!0,duration:0};return this.createEmitter(e,i,r)}burstEmit(t){for(let e=0;e<t.config.particleCount;e++)this.createParticle(t)}createParticle(e){const i=e.config,a="particle_"+ ++this.idCounter,r=(i.direction||0)+(Math.random()-t.RANDOM_OFFSET_RANGE)*i.spread,s=i.velocity.min+Math.random()*(i.velocity.max-i.velocity.min),c=Math.cos(r)*s,o=Math.sin(r)*s,n=i.size.min+Math.random()*(i.size.max-i.size.min),E={id:a,x:e.x+(Math.random()-t.RANDOM_OFFSET_RANGE)*t.POSITION_OFFSET,y:e.y+(Math.random()-t.RANDOM_OFFSET_RANGE)*t.POSITION_OFFSET,velX:c,velY:o,size:n,originalSize:n,color:i.color,opacity:i.opacity.start,life:i.particleLife,maxLife:i.particleLife,startTime:Date.now()},l=this.graphics.createCircle(E.x,E.y,E.size,{id:a,fill:E.color,opacity:E.opacity});return this.graphics.addToLayer("game",l),E.element=l,this.particles.set(a,E),e.particles.push(E),E}update(){const e=Date.now(),i=t.DELTA_TIME_60FPS;for(const[,i]of this.activeEmitters)if(i.active)if(i.config.duration>0&&e-i.startTime>i.config.duration)i.active=!1;else if(!i.config.burst&&i.active){e-i.lastEmission>=t.EMISSION_TIME_MS/i.config.emissionRate&&(this.createParticle(i),i.lastEmission=e)}for(const[e,a]of this.particles){a.x+=a.velX*i,a.y+=a.velY*i;const r=this.getParticleEmitter(a);r&&(a.velX+=r.config.gravity.x*i,a.velY+=r.config.gravity.y*i,a.velX+=r.config.wind.x*i,a.velY+=r.config.wind.y*i),a.life-=t.FRAME_TIME;const s=a.life/a.maxLife;if(r&&r.config.fadeOut){const t=r.config.opacity.start-r.config.opacity.end;a.opacity=r.config.opacity.end+s*t}r&&r.config.shrink&&(a.size=a.originalSize*s),a.element&&(a.element.setAttribute("cx",a.x),a.element.setAttribute("cy",a.y),a.element.setAttribute("r",Math.max(t.SIZE_MIN_RENDER,a.size)),a.element.setAttribute("opacity",Math.max(0,a.opacity))),a.life<=0&&this.removeParticle(e)}for(const[t,e]of this.activeEmitters)e.active||0!==e.particles.length||this.activeEmitters.delete(t)}getParticleEmitter(t){for(const e of this.activeEmitters.values())if(e.particles.includes(t))return e;return null}removeParticle(t){const e=this.particles.get(t);if(!e)return;e.element&&this.graphics.remove(e.element);const i=this.getParticleEmitter(e);if(i){const t=i.particles.indexOf(e);t>-1&&i.particles.splice(t,1)}this.particles.delete(t)}removeEmitter(t){const e=this.activeEmitters.get(t);if(e){for(const t of[...e.particles])this.removeParticle(t.id);this.activeEmitters.delete(t)}}startUpdateLoop(){this.updateInterval||(this.updateInterval=setInterval(()=>{this.update()},t.FRAME_TIME))}stopUpdateLoop(){this.updateInterval&&(clearInterval(this.updateInterval),this.updateInterval=null)}clear(){for(const t of this.particles.keys())this.removeParticle(t);this.activeEmitters.clear(),this.idCounter=0}getDebugInfo(){return{activeEmitters:this.activeEmitters.size,activeParticles:this.particles.size,totalCreatedParticles:this.idCounter}}}
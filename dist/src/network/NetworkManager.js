export class NetworkManager{constructor(){this.socket=null,this.isConnected=!1,this.playerId=null,this.messageHandlers=new Map,this.connectionCallbacks=new Map,this.reconnectAttempts=0,this.maxReconnectAttempts=5,this.reconnectDelay=1e3,this.heartbeatInterval=null,this.lastHeartbeat=null,this.MessageTypes={PLAYER_JOIN:"player_join",PLAYER_LEAVE:"player_leave",PLAYER_MOVE:"player_move",PLAYER_FIRE:"player_fire",GAME_STATE:"game_state",CHAT_MESSAGE:"chat_message",HEARTBEAT:"heartbeat",ERROR:"error"},console.log("NetworkManager initialized")}async connect(e="ws://localhost:8080",t=null){return this.isConnected?(console.warn("Already connected to server"),!0):new Promise((s,n)=>{try{this.playerId=t||this.generatePlayerId(),this.socket=new WebSocket(e),this.socket.onopen=e=>{console.log("Connected to game server"),this.isConnected=!0,this.reconnectAttempts=0,this.reconnectDelay=1e3,this.startHeartbeat(),this.sendMessage(this.MessageTypes.PLAYER_JOIN,{playerId:this.playerId,timestamp:Date.now()}),this.triggerConnectionCallback("connected",e),s(!0)},this.socket.onmessage=e=>{this.handleMessage(e.data)},this.socket.onclose=t=>{console.log("Disconnected from game server:",t.code,t.reason),this.isConnected=!1,this.stopHeartbeat(),this.triggerConnectionCallback("disconnected",t),1e3!==t.code&&this.reconnectAttempts<this.maxReconnectAttempts&&this.attemptReconnect(e)},this.socket.onerror=e=>{console.error("WebSocket error:",e),this.triggerConnectionCallback("error",e),this.isConnected||n(e)}}catch(e){console.error("Failed to create WebSocket connection:",e),n(e)}})}disconnect(){this.socket&&this.isConnected&&(this.sendMessage(this.MessageTypes.PLAYER_LEAVE,{playerId:this.playerId,timestamp:Date.now()}),this.socket.close(1e3,"Client disconnect")),this.isConnected=!1,this.playerId=null,this.stopHeartbeat()}sendMessage(e,t={}){if(!this.isConnected||!this.socket)return console.warn("Cannot send message: not connected to server"),!1;const s={type:e,playerId:this.playerId,timestamp:Date.now(),data:t};try{return this.socket.send(JSON.stringify(s)),!0}catch(e){return console.error("Failed to send message:",e),!1}}handleMessage(e){try{const t=JSON.parse(e);if(t.type===this.MessageTypes.HEARTBEAT)return void(this.lastHeartbeat=Date.now());if(this.messageHandlers.has(t.type)){this.messageHandlers.get(t.type).forEach(e=>{try{e(t.data,t)}catch(e){console.error("Error in message handler:",e)}})}this.messageHandlers.has(t.type)||console.log("Unhandled message type:",t.type,t.data)}catch(e){console.error("Failed to parse message:",e)}}on(e,t){this.messageHandlers.has(e)||this.messageHandlers.set(e,[]),this.messageHandlers.get(e).push(t)}off(e,t){if(this.messageHandlers.has(e)){const s=this.messageHandlers.get(e),n=s.indexOf(t);n>-1&&s.splice(n,1)}}onConnection(e,t){this.connectionCallbacks.has(e)||this.connectionCallbacks.set(e,[]),this.connectionCallbacks.get(e).push(t)}sendPlayerMovement(e,t,s){return this.sendMessage(this.MessageTypes.PLAYER_MOVE,{position:e,velocity:t,rotation:s,timestamp:Date.now()})}sendPlayerFire(e,t,s="laser"){return this.sendMessage(this.MessageTypes.PLAYER_FIRE,{position:e,rotation:t,weaponType:s,timestamp:Date.now()})}sendChatMessage(e){return this.sendMessage(this.MessageTypes.CHAT_MESSAGE,{message:e,timestamp:Date.now()})}startHeartbeat(){this.lastHeartbeat=Date.now(),this.heartbeatInterval=setInterval(()=>{if(this.isConnected){this.sendMessage(this.MessageTypes.HEARTBEAT,{timestamp:Date.now()});Date.now()-this.lastHeartbeat>1e4&&console.warn("Heartbeat timeout, connection may be lost")}},5e3)}stopHeartbeat(){this.heartbeatInterval&&(clearInterval(this.heartbeatInterval),this.heartbeatInterval=null)}attemptReconnect(e){this.reconnectAttempts++,console.log(`Attempting reconnection ${this.reconnectAttempts}/${this.maxReconnectAttempts}...`),setTimeout(async()=>{try{await this.connect(e,this.playerId)}catch(t){console.error("Reconnection failed:",t),this.reconnectAttempts<this.maxReconnectAttempts?(this.reconnectDelay=Math.min(2*this.reconnectDelay,3e4),this.attemptReconnect(e)):(console.error("Max reconnection attempts reached"),this.triggerConnectionCallback("reconnectFailed",t))}},this.reconnectDelay)}triggerConnectionCallback(e,t){if(this.connectionCallbacks.has(e)){this.connectionCallbacks.get(e).forEach(e=>{try{e(t)}catch(e){console.error("Error in connection callback:",e)}})}}generatePlayerId(){return`player_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}getStatus(){return{connected:this.isConnected,playerId:this.playerId,reconnectAttempts:this.reconnectAttempts,lastHeartbeat:this.lastHeartbeat,messageHandlers:Array.from(this.messageHandlers.keys())}}getNetworkStats(){return{connected:this.isConnected,playerId:this.playerId,reconnectAttempts:this.reconnectAttempts,maxReconnectAttempts:this.maxReconnectAttempts,lastHeartbeat:this.lastHeartbeat,handlerCount:this.messageHandlers.size,socketState:this.socket?this.socket.readyState:null,socketUrl:this.socket?this.socket.url:null}}}
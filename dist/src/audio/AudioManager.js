import{AUDIO as t}from"../constants.js";export class AudioManager{constructor(){this.audioContext=null,this.sounds=new Map,this.masterVolume=.7,this.isEnabled=!0,this.isInitialized=!1,this.initializeAudioContext(),this.generateSounds()}initializeAudioContext(){try{this.audioContext=new(window.AudioContext||window.webkitAudioContext),this.masterGain=this.audioContext.createGain(),this.masterGain.gain.value=this.masterVolume,this.masterGain.connect(this.audioContext.destination),this.isInitialized=!0}catch(t){console.warn("Web Audio API not supported, audio disabled:",t),this.isEnabled=!1}}async resumeAudioContext(){this.audioContext&&"suspended"===this.audioContext.state&&await this.audioContext.resume()}generateSounds(){this.isEnabled&&(this.generateThrusterSound(),this.generateCollisionSound(),this.generateAmbientHum(),this.generateLaserSound())}generateThrusterSound(){const e=this.createNoiseBuffer(t.AMBIENT_VOLUME,(e,i)=>(Math.sin(e*t.FREQUENCY_MID*i)*t.VOLUME_LOW+(Math.random()-t.FADE_DURATION)*t.AMBIENT_VOLUME)*Math.exp(-i*t.ENVELOPE_DECAY)*t.THRUSTER_VOLUME);this.sounds.set("thruster",e)}generateCollisionSound(){const e=this.createNoiseBuffer(t.FADE_DURATION,(e,i)=>{const a=Math.sin(e*t.FREQUENCY_HIGH*i)*Math.exp(-i*t.IMPACT_DECAY),s=Math.sin(e*t.FREQUENCY_MID*i)*Math.exp(-i*t.RUMBLE_DECAY),n=(Math.random()-t.FADE_DURATION)*t.NOISE_MIX*Math.exp(-i*t.NOISE_DECAY);return(a*t.IMPACT_MIX+s*t.AMBIENT_VOLUME+n)*t.SOUND_MIX});this.sounds.set("collision",e)}generateAmbientHum(){const e=this.createNoiseBuffer(2,(e,i)=>(Math.sin(e*t.FREQUENCY_LOW*i)*t.HUM_MIX+Math.sin(e*t.HUM_FREQUENCY*i)*t.FADE_DURATION)*(1+Math.sin(e*t.FADE_DURATION*i)*t.VOLUME_LOW)*t.AMBIENT_VOLUME);this.sounds.set("ambient",e)}generateLaserSound(){const e=this.createNoiseBuffer(t.VOLUME_HIGH,(e,i)=>{const a=Math.sin(e*t.FREQUENCY_HIGH*t.LASER_FREQUENCY_MULT*i)*Math.exp(-i*t.LASER_BEAM_DECAY),s=Math.sin(e*t.FREQUENCY_HIGH*t.LASER_ZAP_FREQUENCY_MULT*i)*Math.exp(-i*t.LASER_ZAP_DECAY),n=(Math.random()-t.FADE_DURATION)*t.VOLUME_LOW*Math.exp(-i*t.LASER_ENERGY_DECAY);return(a*t.SOUND_MIX+s*t.VOLUME_HIGH+n)*t.LASER_VOLUME});this.sounds.set("laser",e)}createNoiseBuffer(t,e){if(!this.audioContext)return null;const i=this.audioContext.sampleRate,a=i*t,s=this.audioContext.createBuffer(1,a,i),n=s.getChannelData(0);for(let t=0;t<a;t++){const a=t/i,s=2*Math.PI/i;n[t]=e(s,a)}return s}play(e,i={}){if(!this.isEnabled||!this.isInitialized)return null;this.resumeAudioContext();const a=this.sounds.get(e);if(!a)return console.warn(`Sound '${e}' not found`),null;const s=this.audioContext.createBufferSource(),n=this.audioContext.createGain();return s.buffer=a,s.connect(n),n.connect(this.masterGain),n.gain.value=i.volume||1,i.loop&&(s.loop=!0),i.playbackRate&&(s.playbackRate.value=i.playbackRate),s.start(0),!i.loop&&i.duration&&s.stop(this.audioContext.currentTime+i.duration),{source:s,gainNode:n,stop:()=>s.stop(),setVolume:t=>{n.gain.value=t},fadeOut:(e=t.FADE_DURATION)=>{n.gain.exponentialRampToValueAtTime(t.RAMP_TIME,this.audioContext.currentTime+e),setTimeout(()=>s.stop(),e*t.SUSTAIN_TIME)}}}playThruster(e=1){return this.play("thruster",{volume:e*t.VOLUME_HIGH,playbackRate:t.THRUSTER_VOLUME+e*t.PLAYBACK_MIN,loop:!0})}playCollision(e=1){return this.play("collision",{volume:e*t.COLLISION_VOLUME,playbackRate:t.PLAYBACK_BASE+Math.random()*t.VOLUME_HIGH})}playAmbient(){return this.play("ambient",{volume:t.AMBIENT_VOLUME,loop:!0})}playLaser(e=1){return this.play("laser",{volume:e*t.LASER_VOLUME,playbackRate:t.PLAYBACK_BASE+Math.random()*t.VOLUME_LOW})}setMasterVolume(t){this.masterVolume=Math.max(0,Math.min(1,t)),this.masterGain&&(this.masterGain.gain.value=this.masterVolume)}enable(){this.isEnabled=!0,this.isInitialized||(this.initializeAudioContext(),this.generateSounds())}disable(){this.isEnabled=!1}stopAll(){}}
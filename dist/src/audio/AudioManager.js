import{AUDIO as t}from"../constants.js";export class AudioManager{constructor(){this.audioContext=null,this.sounds=new Map,this.masterVolume=.7,this.isEnabled=this.loadAudioPreference(),this.isInitialized=!1,this.analyser=null,this.visualizationCallbacks=new Set,this.isEnabled&&(this.initializeAudioContext(),this.generateSounds(),this.setupAudioVisualization())}initializeAudioContext(){try{this.audioContext=new(window.AudioContext||window.webkitAudioContext),this.masterGain=this.audioContext.createGain(),this.masterGain.gain.value=this.masterVolume,this.masterGain.connect(this.audioContext.destination),this.isInitialized=!0}catch(t){console.warn("Web Audio API not supported, audio disabled:",t),this.isEnabled=!1}}async resumeAudioContext(){this.audioContext&&"suspended"===this.audioContext.state&&await this.audioContext.resume()}generateSounds(){this.isEnabled&&(this.generateThrusterSound(),this.generateCollisionSound(),this.generateAmbientHum(),this.generateLaserSound(),this.generateWeaponRechargeSound())}generateThrusterSound(){const e=this.createNoiseBuffer(t.AMBIENT_VOLUME,(e,a)=>(Math.sin(e*t.FREQUENCY_MID*a)*t.VOLUME_LOW+(Math.random()-t.FADE_DURATION)*t.AMBIENT_VOLUME)*Math.exp(-a*t.ENVELOPE_DECAY)*t.THRUSTER_VOLUME);this.sounds.set("thruster",e)}generateCollisionSound(){const e=this.createNoiseBuffer(t.FADE_DURATION,(e,a)=>{const i=Math.sin(e*t.FREQUENCY_HIGH*a)*Math.exp(-a*t.IMPACT_DECAY),n=Math.sin(e*t.FREQUENCY_MID*a)*Math.exp(-a*t.RUMBLE_DECAY),s=(Math.random()-t.FADE_DURATION)*t.NOISE_MIX*Math.exp(-a*t.NOISE_DECAY);return(i*t.IMPACT_MIX+n*t.AMBIENT_VOLUME+s)*t.SOUND_MIX});this.sounds.set("collision",e)}generateAmbientHum(){const e=this.createNoiseBuffer(2,(e,a)=>(Math.sin(e*t.FREQUENCY_LOW*a)*t.HUM_MIX+Math.sin(e*t.HUM_FREQUENCY*a)*t.FADE_DURATION)*(1+Math.sin(e*t.FADE_DURATION*a)*t.VOLUME_LOW)*t.AMBIENT_VOLUME);this.sounds.set("ambient",e)}generateLaserSound(){const e=this.createNoiseBuffer(t.VOLUME_HIGH,(e,a)=>{const i=Math.sin(e*t.FREQUENCY_HIGH*t.LASER_FREQUENCY_MULT*a)*Math.exp(-a*t.LASER_BEAM_DECAY),n=Math.sin(e*t.FREQUENCY_HIGH*t.LASER_ZAP_FREQUENCY_MULT*a)*Math.exp(-a*t.LASER_ZAP_DECAY),s=(Math.random()-t.FADE_DURATION)*t.VOLUME_LOW*Math.exp(-a*t.LASER_ENERGY_DECAY);return(i*t.SOUND_MIX+n*t.VOLUME_HIGH+s)*t.LASER_VOLUME});this.sounds.set("laser",e)}generateWeaponRechargeSound(){const e=this.createNoiseBuffer(t.WEAPON_RECHARGE_DURATION,(e,a)=>{const i=Math.sin(e*t.FREQUENCY_MID*a*(1+a*t.WEAPON_RECHARGE_FREQUENCY_MULT))*(a*t.WEAPON_RECHARGE_SPARKLE_MULT),n=Math.sin(e*t.FREQUENCY_HIGH*a*t.WEAPON_RECHARGE_SPARKLE_MULT)*Math.sin(e*t.WEAPON_RECHARGE_SPARKLE_WIDTH*a)*t.WEAPON_RECHARGE_SPARKLE_DECAY,s=Math.sin(e*t.FREQUENCY_LOW*a)*t.WEAPON_RECHARGE_HUM_VOLUME*(1-Math.exp(-a*t.WEAPON_RECHARGE_HUM_DECAY));return(i*t.WEAPON_RECHARGE_VOLUME+n+s)*Math.min(1,a*t.WEAPON_RECHARGE_FADEOUT_RATE)*t.VOLUME_MEDIUM});this.sounds.set("weaponRecharge",e)}createNoiseBuffer(t,e){if(!this.audioContext)return null;const a=this.audioContext.sampleRate,i=a*t,n=this.audioContext.createBuffer(1,i,a),s=n.getChannelData(0);for(let t=0;t<i;t++){const i=t/a,n=2*Math.PI/a;s[t]=e(n,i)}return n}play(e,a={}){if(!this.isEnabled||!this.isInitialized)return null;this.resumeAudioContext();const i=this.sounds.get(e);if(!i)return console.warn(`Sound '${e}' not found`),null;const n=this.audioContext.createBufferSource(),s=this.audioContext.createGain();return n.buffer=i,n.connect(s),s.connect(this.masterGain),s.gain.value=a.volume||1,a.loop&&(n.loop=!0),a.playbackRate&&(n.playbackRate.value=a.playbackRate),n.start(0),!a.loop&&a.duration&&n.stop(this.audioContext.currentTime+a.duration),{source:n,gainNode:s,stop:()=>n.stop(),setVolume:t=>{s.gain.value=t},fadeOut:(e=t.FADE_DURATION)=>{s.gain.exponentialRampToValueAtTime(t.RAMP_TIME,this.audioContext.currentTime+e),setTimeout(()=>n.stop(),e*t.SUSTAIN_TIME)}}}playThruster(e=1){return this.play("thruster",{volume:e*t.VOLUME_HIGH,playbackRate:t.THRUSTER_VOLUME+e*t.PLAYBACK_MIN,loop:!0})}playCollision(e=1){return this.play("collision",{volume:e*t.COLLISION_VOLUME,playbackRate:t.PLAYBACK_BASE+Math.random()*t.VOLUME_HIGH})}playAmbient(){return this.play("ambient",{volume:t.AMBIENT_VOLUME,loop:!0})}playLaser(e=1){return this.play("laser",{volume:e*t.LASER_VOLUME,playbackRate:t.PLAYBACK_BASE+Math.random()*t.VOLUME_LOW})}playWeaponRecharge(){return this.play("weaponRecharge",{volume:t.VOLUME_MEDIUM,playbackRate:t.PLAYBACK_BASE+Math.random()*t.PLAYBACK_VARIATION})}setMasterVolume(t){this.masterVolume=Math.max(0,Math.min(1,t)),this.masterGain&&(this.masterGain.gain.value=this.masterVolume)}enable(){this.isInitialized||(this.initializeAudioContext(),this.generateSounds(),this.setupAudioVisualization()),this.isEnabled=!0,this.saveAudioPreference()}disable(){this.isEnabled=!1,this.saveAudioPreference()}get enabled(){return this.isEnabled}loadAudioPreference(){try{const t=localStorage.getItem("maxPixels.audio.enabled");return null===t||JSON.parse(t)}catch(t){return console.warn("Failed to load audio preference:",t),!0}}saveAudioPreference(){try{localStorage.setItem("maxPixels.audio.enabled",JSON.stringify(this.isEnabled))}catch(t){console.warn("Failed to save audio preference:",t)}}stopAll(){}setupAudioVisualization(){if(this.audioContext)try{this.analyser=this.audioContext.createAnalyser(),this.analyser.fftSize=256,this.analyser.smoothingTimeConstant=.8,this.masterGain&&this.masterGain.connect(this.analyser),this.startVisualizationLoop()}catch(t){console.warn("Audio visualization setup failed:",t)}}startVisualizationLoop(){if(!this.analyser)return;const t=this.analyser.frequencyBinCount,e=new Uint8Array(t),updateVisualization=()=>{this.isEnabled&&this.analyser&&(this.analyser.getByteFrequencyData(e),this.visualizationCallbacks.forEach(a=>{try{a(e,t)}catch(t){console.warn("Visualization callback error:",t)}}),requestAnimationFrame(updateVisualization))};updateVisualization()}addVisualizationCallback(t){return"function"==typeof t?(this.visualizationCallbacks.add(t),()=>this.visualizationCallbacks.delete(t)):null}removeVisualizationCallback(t){return this.visualizationCallbacks.delete(t)}getAudioData(){if(!this.analyser)return null;const t=this.analyser.frequencyBinCount,e=new Uint8Array(t),a=new Uint8Array(t);return this.analyser.getByteFrequencyData(e),this.analyser.getByteTimeDomainData(a),{frequency:e,waveform:a,bufferLength:t}}}
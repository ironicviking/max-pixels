import{IDGenerator as t}from"../utils/IDGenerator.js";import{PLAYER as i,WEAPONS as e}from"../constants.js";export class Player{constructor(s,h={x:i.SPAWN_X,y:i.SPAWN_Y}){this.id=t.generate(),this.username=s,this.sessionToken=null,this.position={...h},this.velocity={x:0,y:0},this.rotation=0,this.rotationSpeed=0,this.health=i.MAX_HEALTH,this.maxHealth=i.MAX_HEALTH,this.shield=i.MAX_SHIELD,this.maxShield=i.MAX_SHIELD,this.isAlive=!0,this.lastDamageTime=0,this.invincibilityEndTime=0,this.energy=e.MAX_ENERGY,this.maxEnergy=e.MAX_ENERGY,this.weaponHeat=0,this.maxWeaponHeat=e.MAX_HEAT,this.weaponOverheated=!1,this.lastShotTime=0,this.thrust=0,this.boosting=!1,this.shieldsActive=!1,this.lastThrustTime=0,this.credits=1e3,this.inventory=new Map,this.cargoCapacity=100,this.currentCargo=0,this.shipType="basic_fighter",this.shipSize=i.RADIUS,this.speed=i.SPEED,this.thrusterEfficiency=1,this.weaponDamage=1,this.armorRating=1,this.currentSystem=null,this.lastKnownPosition={...h},this.nearestStation=null,this.nearestJumpGate=null,this.stats={totalDistanceTraveled:0,systemsVisited:new Set,successfulTrades:0,totalCreditsEarned:0,asteroidsDestroyed:0,timePlayed:0,deathCount:0},this.lastUpdateTime=Date.now(),this.dirtyState=!0}update(t){const i=Date.now();this.updateMovement(t),this.regenerateHealth(t),this.regenerateShields(t),this.regenerateEnergy(t),this.cooldownWeapons(t),this.updateStatistics(t),i>this.invincibilityEndTime&&(this.invincibilityEndTime=0),this.weaponOverheated&&i>this.lastShotTime+e.COOLDOWN_DURATION&&(this.weaponOverheated=!1),this.lastUpdateTime=i,this.dirtyState=!0}updateMovement(t){if(this.rotation+=this.rotationSpeed*t,this.thrust>0){const i=this.thrust*this.speed*this.thrusterEfficiency*t,e=Math.cos(this.rotation)*i,s=Math.sin(this.rotation)*i;this.velocity.x+=e,this.velocity.y+=s,this.lastThrustTime=Date.now()}const e=this.boosting?i.BOOST_MULTIPLIER:1;this.lastKnownPosition={...this.position},this.position.x+=this.velocity.x*e*t,this.position.y+=this.velocity.y*e*t;const s=Math.sqrt(Math.pow(this.position.x-this.lastKnownPosition.x,2)+Math.pow(this.position.y-this.lastKnownPosition.y,2));this.stats.totalDistanceTraveled+=s;this.velocity.x*=.98,this.velocity.y*=.98}setThrust(t){this.thrust=Math.max(0,Math.min(1,t)),this.dirtyState=!0}setRotation(t){this.rotationSpeed=t,this.dirtyState=!0}activateBoost(t){this.boosting=t,this.dirtyState=!0}takeDamage(t,e=!1){if(!this.isAlive||this.isInvincible())return!1;let s=t;if(!e&&this.shield>0){const t=s*i.SHIELD_DAMAGE_REDUCTION,e=Math.min(this.shield,t);this.shield-=e,s-=e,this.shield<=0&&(this.shield=0,this.shieldsActive=!1)}return s>0&&(s*=1/this.armorRating,this.health-=s,this.lastDamageTime=Date.now(),i.SHIELD_AUTO_ACTIVATE&&this.shield>0&&(this.shieldsActive=!0)),this.health<=0&&this.die(),this.dirtyState=!0,!0}die(){this.isAlive=!1,this.health=0,this.stats.deathCount++,setTimeout(()=>{this.respawn()},i.DEATH_RESPAWN_DELAY),this.dirtyState=!0}respawn(){this.isAlive=!0,this.health=this.maxHealth,this.shield=this.maxShield,this.energy=this.maxEnergy,this.position={x:i.SPAWN_X,y:i.SPAWN_Y},this.velocity={x:0,y:0},this.invincibilityEndTime=Date.now()+i.INVINCIBILITY_DURATION,this.dirtyState=!0}heal(t){this.isAlive&&(this.health=Math.min(this.maxHealth,this.health+t),this.dirtyState=!0)}regenerateHealth(t){if(!this.isAlive)return;if(Date.now()-this.lastDamageTime>=i.HEALTH_REGEN_DELAY&&this.health<this.maxHealth){const e=i.HEALTH_REGEN_RATE*t;this.health=Math.min(this.maxHealth,this.health+e),this.dirtyState=!0}}regenerateShields(t){if(!this.isAlive||this.shield>=this.maxShield)return;if(Date.now()-this.lastDamageTime>=i.SHIELD_REGEN_DELAY){const e=i.SHIELD_REGEN_RATE*t;this.shield=Math.min(this.maxShield,this.shield+e),this.dirtyState=!0}}toggleShields(){this.shield>0&&(this.shieldsActive=!this.shieldsActive,this.dirtyState=!0)}isInvincible(){return Date.now()<this.invincibilityEndTime}canFireWeapon(){const t=Date.now();return this.isAlive&&!this.weaponOverheated&&this.energy>=e.ENERGY_COST&&t-this.lastShotTime>=e.LASER_FIRE_RATE}fireWeapon(){return!!this.canFireWeapon()&&(this.energy-=e.ENERGY_COST,this.weaponHeat+=e.HEAT_PER_SHOT,this.weaponHeat>=e.OVERHEAT_THRESHOLD&&(this.weaponOverheated=!0),this.lastShotTime=Date.now(),this.dirtyState=!0,!0)}regenerateEnergy(t){if(this.energy<this.maxEnergy){const i=e.ENERGY_REGEN_RATE*t;this.energy=Math.min(this.maxEnergy,this.energy+i),this.dirtyState=!0}}cooldownWeapons(t){if(this.weaponHeat>0){const i=e.HEAT_DISSIPATION_RATE*t;this.weaponHeat=Math.max(0,this.weaponHeat-i),this.weaponHeat<e.OVERHEAT_THRESHOLD&&this.weaponOverheated&&(this.weaponOverheated=!1),this.dirtyState=!0}}addCredits(t){this.credits+=t,this.stats.totalCreditsEarned+=Math.max(0,t),this.dirtyState=!0}spendCredits(t){return this.credits>=t&&(this.credits-=t,this.dirtyState=!0,!0)}addResource(t,i){if(this.getCurrentCargoUsed()+i>this.cargoCapacity)return!1;const e=this.inventory.get(t)||0;return this.inventory.set(t,e+i),this.currentCargo=this.getCurrentCargoUsed(),this.dirtyState=!0,!0}removeResource(t,i){const e=this.inventory.get(t)||0;if(e>=i){const s=e-i;return 0===s?this.inventory.delete(t):this.inventory.set(t,s),this.currentCargo=this.getCurrentCargoUsed(),this.dirtyState=!0,!0}return!1}getResource(t){return this.inventory.get(t)||0}getCurrentCargoUsed(){let t=0;for(const i of this.inventory.values())t+=i;return t}getCargoSpaceRemaining(){return this.cargoCapacity-this.getCurrentCargoUsed()}setCurrentSystem(t){this.currentSystem!==t&&this.stats.systemsVisited.add(t.id),this.currentSystem=t,this.dirtyState=!0}findNearbyObjects(){if(!this.currentSystem)return null;const t=i.INTERACTION_RANGE;return this.nearestStation=this.currentSystem.findNearestStation(this.position.x,this.position.y,t),this.nearestJumpGate=this.currentSystem.findNearestJumpGate(this.position.x,this.position.y,t),{station:this.nearestStation,jumpGate:this.nearestJumpGate}}canInteractWithStation(){return null!==this.nearestStation&&this.isAlive}canUseJumpGate(){return null!==this.nearestJumpGate&&this.nearestJumpGate.isActive&&this.isAlive&&this.energy>=this.nearestJumpGate.energyCost}upgradeShip(t,e){if(!this.spendCredits(e))return!1;switch(t){case"engine":this.thrusterEfficiency*=i.ENGINE_EFFICIENCY_UPGRADE,this.speed*=i.ENGINE_SPEED_UPGRADE;break;case"weapons":this.weaponDamage*=i.WEAPON_DAMAGE_UPGRADE;break;case"armor":this.armorRating*=i.ARMOR_RATING_UPGRADE,this.maxHealth=Math.floor(this.maxHealth*i.HEALTH_UPGRADE_MULTIPLIER);break;case"shields":this.maxShield=Math.floor(this.maxShield*i.SHIELD_UPGRADE_MULTIPLIER);break;case"cargo":this.cargoCapacity=Math.floor(this.cargoCapacity*i.CARGO_UPGRADE_MULTIPLIER);break;case"energy":this.maxEnergy=Math.floor(this.maxEnergy*i.ENERGY_UPGRADE_MULTIPLIER);break;default:return this.addCredits(e),!1}return this.dirtyState=!0,!0}updateStatistics(t){this.stats.timePlayed+=t}getPlayerInfo(){return{id:this.id,username:this.username,position:this.position,rotation:this.rotation,health:this.health,maxHealth:this.maxHealth,shield:this.shield,maxShield:this.maxShield,energy:this.energy,maxEnergy:this.maxEnergy,credits:this.credits,isAlive:this.isAlive,shipType:this.shipType,currentSystem:this.currentSystem?.id||null}}getDetailedStats(){return{...this.getPlayerInfo(),inventory:Object.fromEntries(this.inventory),cargoUsed:this.getCurrentCargoUsed(),cargoCapacity:this.cargoCapacity,stats:{...this.stats,systemsVisited:this.stats.systemsVisited.size,systemsList:Array.from(this.stats.systemsVisited)},upgrades:{thrusterEfficiency:this.thrusterEfficiency,weaponDamage:this.weaponDamage,armorRating:this.armorRating}}}toNetworkData(){return{id:this.id,username:this.username,position:this.position,velocity:this.velocity,rotation:this.rotation,health:this.health,shield:this.shield,energy:this.energy,thrust:this.thrust,boosting:this.boosting,shieldsActive:this.shieldsActive,isAlive:this.isAlive,currentSystem:this.currentSystem?.id||null,lastUpdateTime:this.lastUpdateTime}}fromNetworkData(t){t.lastUpdateTime>this.lastUpdateTime&&(this.position=t.position,this.velocity=t.velocity,this.rotation=t.rotation,this.health=t.health,this.shield=t.shield,this.energy=t.energy,this.thrust=t.thrust,this.boosting=t.boosting,this.shieldsActive=t.shieldsActive,this.isAlive=t.isAlive,this.lastUpdateTime=t.lastUpdateTime,this.dirtyState=!1)}needsNetworkSync(){return this.dirtyState}markSynced(){this.dirtyState=!1}}
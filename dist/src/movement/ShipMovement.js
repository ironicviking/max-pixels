import{PLAYER as t,WEAPONS as s}from"../constants.js";export class ShipMovement{constructor(i,e){this.player=i,this.input=e,this.rotationSpeed=t.ROTATION_SPEED,this.thrustPower=t.THRUST_POWER,this.boostCostPerSecond=s.BOOST_ENERGY_COST,this.isThrusting=!1,this.isBoosting=!1,this.rotationDirection=0,this.thrustLevel=0,this.thrustSmoothing=t.THRUST_SMOOTHING,this.rotationSmoothing=t.ROTATION_CONTROL_SMOOTHING}update(t){this.player.isAlive?(this.handleRotationInput(t),this.handleThrustInput(t),this.handleBoostInput(t),this.handleSpecialActions(),this.applyMovementToPlayer(t)):this.resetControls()}handleRotationInput(t){let s=0;this.input.isPressed("move_left")&&(s=-1),this.input.isPressed("move_right")&&(s=1),this.rotationDirection+=(s-this.rotationDirection)*this.rotationSmoothing;const i=this.rotationDirection*this.rotationSpeed;this.player.setRotation(i)}handleThrustInput(s){let i=0;this.input.isPressed("move_up")?(i=this.thrustPower,this.isThrusting=!0):this.input.isPressed("move_down")?(i=-this.thrustPower*t.REVERSE_THRUST_MULTIPLIER,this.isThrusting=!0):this.isThrusting=!1,this.thrustLevel+=(i-this.thrustLevel)*this.thrustSmoothing,this.player.setThrust(Math.abs(this.thrustLevel))}handleBoostInput(t){const s=this.input.isPressed("boost")&&this.isThrusting,i=this.boostCostPerSecond*t,e=this.player.energy>=i;s&&e?(this.player.energy-=i,this.player.activateBoost(!0),this.isBoosting=!0):(this.player.activateBoost(!1),this.isBoosting=!1)}handleSpecialActions(){this.input.justPressed("action")&&this.fireWeapon(),this.input.justPressed("KeyR")&&this.player.toggleShields()}applyMovementToPlayer(t){this.player.update(t)}fireWeapon(){if(this.player.canFireWeapon()){if(this.player.fireWeapon())return this.createProjectile()}return null}createProjectile(){return{x:this.player.position.x,y:this.player.position.y,velocity:{x:Math.cos(this.player.rotation)*s.LASER_SPEED,y:Math.sin(this.player.rotation)*s.LASER_SPEED},rotation:this.player.rotation,damage:s.LASER_DAMAGE*this.player.weaponDamage,lifetime:s.LASER_LIFETIME,owner:this.player.id,type:"laser"}}resetControls(){this.isThrusting=!1,this.isBoosting=!1,this.rotationDirection=0,this.thrustLevel=0,this.player.setThrust(0),this.player.setRotation(0),this.player.activateBoost(!1)}getMovementStatus(){return{isThrusting:this.isThrusting,isBoosting:this.isBoosting,thrustLevel:this.thrustLevel,rotationDirection:this.rotationDirection,canBoost:this.player.energy>=this.boostCostPerSecond*t.BOOST_CAPABILITY_CHECK_TIME,energy:this.player.energy,maxEnergy:this.player.maxEnergy}}setMovementConfig(t){void 0!==t.rotationSpeed&&(this.rotationSpeed=t.rotationSpeed),void 0!==t.thrustPower&&(this.thrustPower=Math.max(0,Math.min(1,t.thrustPower))),void 0!==t.boostCostPerSecond&&(this.boostCostPerSecond=t.boostCostPerSecond)}setEnabled(t){this.enabled=t,t||this.resetControls()}}
export class TradingSystem{constructor(){this.items=new Map,this.playerInventory=new Map,this.stationInventories=new Map,this.priceHistory=new Map,this.initializeItems(),this.initializeStationInventories()}initializeItems(){[{id:"ore-iron",name:"Iron Ore",category:"raw-materials",basePrice:15,volatility:.2,description:"Basic metallic ore used in construction"},{id:"ore-copper",name:"Copper Ore",category:"raw-materials",basePrice:25,volatility:.3,description:"Conductive metal essential for electronics"},{id:"fuel-hydrogen",name:"Hydrogen Fuel",category:"fuel",basePrice:45,volatility:.4,description:"Clean-burning spacecraft fuel"},{id:"food-rations",name:"Food Rations",category:"consumables",basePrice:30,volatility:.1,description:"Preserved food for long space journeys"},{id:"tech-processors",name:"Quantum Processors",category:"technology",basePrice:150,volatility:.5,description:"Advanced computing components"},{id:"med-supplies",name:"Medical Supplies",category:"medical",basePrice:80,volatility:.2,description:"Essential medical equipment and pharmaceuticals"}].forEach(e=>{this.items.set(e.id,{...e,currentPrice:e.basePrice})})}initializeStationInventories(){this.stationInventories.set("tradingStation",{inventory:new Map([["ore-iron",{quantity:150,buyPrice:12,sellPrice:18}],["ore-copper",{quantity:80,buyPrice:22,sellPrice:28}],["fuel-hydrogen",{quantity:50,buyPrice:40,sellPrice:50}],["food-rations",{quantity:200,buyPrice:25,sellPrice:35}]]),credits:1e4,demandMultipliers:{"ore-iron":.9,"ore-copper":1.1,"fuel-hydrogen":1.2,"food-rations":.8}})}getItem(e){return this.items.get(e)}getPlayerInventory(){return Array.from(this.playerInventory.entries()).map(([e,t])=>({item:this.getItem(e),quantity:t}))}getStationInventory(e){const t=this.stationInventories.get(e);return t?{credits:t.credits,items:Array.from(t.inventory.entries()).map(([e,t])=>({item:this.getItem(e),quantity:t.quantity,buyPrice:t.buyPrice,sellPrice:t.sellPrice}))}:null}canBuyFromStation(e,t,i){const r=this.stationInventories.get(e);if(!r)return{success:!1,error:"Station not found"};const n=r.inventory.get(t);if(!n)return{success:!1,error:"Item not available"};if(n.quantity<i)return{success:!1,error:"Insufficient stock"};return{success:!0,cost:n.sellPrice*i}}canSellToStation(e,t,i,r){const n=this.stationInventories.get(e);if(!n)return{success:!1,error:"Station not found"};const s=n.inventory.get(t);if(!s)return{success:!1,error:"Station does not buy this item"};if((this.playerInventory.get(t)||0)<i)return{success:!1,error:"Insufficient inventory"};const o=s.buyPrice*i;return n.credits<o?{success:!1,error:"Station has insufficient credits"}:{success:!0,value:o}}buyFromStation(e,t,i,r){const n=this.canBuyFromStation(e,t,i);if(!n.success)return n;if(r<n.cost)return{success:!1,error:"Insufficient credits"};const s=this.stationInventories.get(e),o=s.inventory.get(t);o.quantity-=i,s.credits+=n.cost;const a=this.playerInventory.get(t)||0;return this.playerInventory.set(t,a+i),this.updatePrices(t,"buy",i),{success:!0,cost:n.cost,newPlayerQuantity:a+i,newStationQuantity:o.quantity}}sellToStation(e,t,i){const r=this.canSellToStation(e,t,i,0);if(!r.success)return r;const n=this.stationInventories.get(e),s=n.inventory.get(t);s.quantity+=i,n.credits-=r.value;const o=this.playerInventory.get(t);return this.playerInventory.set(t,o-i),0===this.playerInventory.get(t)&&this.playerInventory.delete(t),this.updatePrices(t,"sell",i),{success:!0,value:r.value,newPlayerQuantity:Math.max(0,o-i),newStationQuantity:s.quantity}}updatePrices(e,t,i){const r=this.stationInventories.get("tradingStation").inventory.get(e);if(!r)return;const n=.1*i;"buy"===t?(r.sellPrice+=n,r.buyPrice+=.8*n):"sell"===t&&(r.sellPrice-=n,r.buyPrice-=.8*n);const s=this.getItem(e);r.sellPrice=Math.max(.5*s.basePrice,r.sellPrice),r.buyPrice=Math.max(.3*s.basePrice,r.buyPrice),r.sellPrice=Math.min(2*s.basePrice,r.sellPrice),r.buyPrice=Math.min(1.5*s.basePrice,r.buyPrice)}addPlayerItem(e,t){const i=this.playerInventory.get(e)||0;this.playerInventory.set(e,i+t)}getPlayerItemQuantity(e){return this.playerInventory.get(e)||0}getTotalInventoryValue(){let e=0;for(const[t,i]of this.playerInventory){const r=this.getItem(t);r&&(e+=r.basePrice*i)}return e}}
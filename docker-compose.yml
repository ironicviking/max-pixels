version: '3.8'

services:
  # Main web application
  web:
    build: .
    ports:
      - "3000:3000"
    volumes:
      # Mount source code for development hot-reloading
      - ./src:/app/src
      - ./index.html:/app/index.html
      # Exclude node_modules from volume mounting
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgres://maxpixels_dev:dev_password_123@postgres:5432/maxpixels_dev
      - REDIS_URL=redis://redis:6379
    restart: unless-stopped
    networks:
      - maxpixels-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Redis for session storage and real-time features (future use)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - maxpixels-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # PostgreSQL for game data persistence (future use)
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: maxpixels_dev
      POSTGRES_USER: maxpixels_dev
      POSTGRES_PASSWORD: dev_password_123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - maxpixels-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U maxpixels_dev -d maxpixels_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  maxpixels-network:
    driver: bridge

volumes:
  redis_data:
  postgres_data: